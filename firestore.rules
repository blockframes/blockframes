service cloud.firestore {
  match /databases/{database}/documents {

    /// USERS RULES ///

    match /users/{userId} {
    	allow read, update: if isSignedIn(); // Secure it as soon as we got Inivitations collection
    	allow create: if currentUser().uid == existingData().uid
				|| currentUser().uid == incomingData().uid
      allow update, delete: if currentUser().uid == existingData().uid
      	&& existingData() == incomingData()

    }

    /// NOTIFICATIONS RULES ///

    match /notifications/{notificationId} {
    	allow read: if currentUser().uid == existingData().userId
    }

    /// ORGANIZATION RULES ///

    match /orgs/{orgId} {
    	allow create: if isSignedIn()
      allow get: if isSuperAdmin(orgId) || isOrgAdmin(orgId)
    	allow update, delete: if isSuperAdmin(orgId)
      	&& existingData().name == incomingData().name
        && existingData().id == incomingData().id
      allow update: if isOrgAdmin(orgId)
      	&& existingData().name == incomingData().name
        && existingData().id == incomingData().id
    }

    /// PERMISSIONS RULES ///

    match /permissions/{orgId} {
    	allow create: if isSignedIn()
    	allow read, update, delete: if isSuperAdmin(orgId)
        || isOrgAdmin(orgId)

      match /{documents=**} {
      	allow read, create: if isSignedIn()
    		allow read, update, delete: if isSuperAdmin(orgId)
          || isOrgAdmin(orgId)
      }
    }

    /// MOVIES RULES ///

    match /movies/{movieId} {
    	allow create: if isSuperAdmin(getUserOrgId())
        || isOrgAdmin(getUserOrgId())
    	allow read, update, delete: if isSignedIn()
        && getOrgsDocumentPermissions(movieId).owner == getUserOrgId()

      match /{documents=**} {
        allow create: if isSuperAdmin(getUserOrgId())
          || isOrgAdmin(getUserOrgId())
        allow read, update, delete: if isSignedIn()
          && getOrgsDocumentPermissions(movieId).owner == getUserOrgId()
      }
    }

    /// DELIVERIES RULES ///

    match /deliveries/{deliveryId} {
    	allow create, list: if isSuperAdmin(getUserOrgId())
        || isOrgAdmin(getUserOrgId())
    	allow read, update, delete: if isSignedIn()
        && getOrgsDocumentPermissions(deliveryId).owner == getUserOrgId()

      match /{documents=**} {
        allow create: if isSuperAdmin(getUserOrgId())
          || isOrgAdmin(getUserOrgId())
        allow read, update, delete: if isSignedIn()
      }
    }

    // TEMPLATES RULES //

    match /templates/{templateId} {
    	allow create: if isSuperAdmin(getUserOrgId())
        || isOrgAdmin(getUserOrgId())
    	allow read, update, delete: if isSignedIn()
        && getOrgsDocumentPermissions(templateId).owner == getUserOrgId()

      match /{documents=**} {
        allow create: if isSuperAdmin(getUserOrgId())
          || isOrgAdmin(getUserOrgId())
        allow read, update, delete: if isSignedIn()
          && getOrgsDocumentPermissions(templateId).owner == getUserOrgId()
      }
    }

    // FUNCTIONS //

    function existingData() {
      return resource.data
    }

    function incomingData() {
      return request.resource.data
    }

    function currentUser() {
      return request.auth
    }

    function isSignedIn() {
      return currentUser() != null
    }

  	function getUserOrgId() {
    	return get(/databases/$(database)/documents/users/$(currentUser().uid)).data.orgId
  	}

  	function isSuperAdmin(orgId) {
    	return isSignedIn() && currentUser().uid in
    		get(/databases/$(database)/documents/permissions/$(orgId)).data.superAdmins
  	}

    function isOrgAdmin(orgId) {
    	return isSignedIn() && currentUser().uid in
    		get(/databases/$(database)/documents/permissions/$(orgId)).data.admins
    }

    function getOrgsDocumentPermissions(docId) {
    	return get(/databases/$(database)/documents/permissions/$(getUserOrgId())/orgDocsPermissions/$(docId)).data
    }
  }
}
