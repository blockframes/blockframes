rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /// USERS RULES ///

    match /users/{userId} {
    	allow read, update: if isSignedIn();
    	allow create: if (userId() == incomingData().uid && userId() == userId)
      	|| isOrgAdmin(userId(), userOrgId());
    }

    /// NOTIFICATIONS RULES ///

    match /notifications/{notificationId} {
    	allow read: if (currentUser().uid == existingData().userId)
      	|| (userOrgId() == existingData().stakeholderId);
      allow update: if currentUser().uid == existingData().userId
      	&& existingData().isRead != incomingData().isRead;
    }

    /// INVITATIONS RULES ///

    match /invitations/{invitationId} {
    	allow read: if currentUser().uid == existingData().userId
      	|| (userOrgId() == existingData().organizationId)
        && (isOrgAdmin(userId(), userOrgId()));
      allow update: if currentUser().uid == existingData().userId
      	&& existingData().state != incomingData().state
        || (userOrgId() == existingData().organizationId)
      	&& (existingData().state != incomingData().state);
    }

    /// ORGANIZATION RULES ///

    match /orgs/{orgId} {
    	allow create, read: if isSignedIn();
      allow update, delete: if userOrgId() == orgId
        && isOrgAdmin(userId(), orgId);
    }

    /// PERMISSIONS RULES ///

    match /permissions/{orgId}/{subCollections=**} {
      // Should we only allow firebase functions to write permissions ?
    	allow read, write: if isSignedIn();
    }

    /// MOVIES RULES ///

    match /movies/{movieId}/{subCollections=**} {
    	allow create: if orgCan('canCreate', userOrgId(), movieId)
        && userCan('canCreate', userId(), userOrgId(), movieId);
      allow read: if orgCan('canRead', userOrgId(), movieId)
        && userCan('canRead', userId(), userOrgId(), movieId);
    	allow update: if orgCan('canUpdate', userOrgId(), movieId)
        && userCan('canUpdate', userId(), userOrgId(), movieId);
      allow delete: if orgCan('canDelete', userOrgId(), movieId)
        && userCan('canDelete', userId(), userOrgId(), movieId);

    }

    /// DELIVERIES RULES ///

    match /deliveries/{deliveryId}/{subCollections=**} {
    	allow create: if orgCan('canCreate', userOrgId(), deliveryId)
        && userCan('canCreate', userId(), userOrgId(), deliveryId);
      allow read: if userCan('canRead', userId(), userOrgId(), deliveryId);
    	allow update: if orgCan('canUpdate', userOrgId(), deliveryId)
        && userCan('canUpdate', userId(), userOrgId(), deliveryId);
      allow delete: if orgCan('canDelete', userOrgId(), deliveryId)
        && userCan('canDelete', userId(), userOrgId(), deliveryId);
    }

    /// TEMPLATES RULES ///

    match /templates/{templateId}/{subCollections=**} {
    	allow create: if orgCan('canCreate', userOrgId(), templateId)
        && userCan('canCreate', userId(), userOrgId(), templateId);
      allow read: if orgCan('canRead', userOrgId(), templateId)
        && userCan('canRead', userId(), userOrgId(), templateId);
    	allow update: if orgCan('canUpdate', userOrgId(), templateId)
        && userCan('canUpdate', userId(), userOrgId(), templateId);
      allow delete: if orgCan('canDelete', userOrgId(), templateId)
        && userCan('canDelete', userId(), userOrgId(), templateId);
    }

    /// FUNCTIONS ///

    function existingData() {
      return resource.data;
    }

    function incomingData() {
      return request.resource.data;
    }

    function currentUser() {
      return request.auth;
    }

    function userId() {
      return currentUser().uid;
    }

    function isSignedIn() {
      return currentUser() != null;
    }

  	function userOrgId() {
    	return get(/databases/$(database)/documents/users/$(userId())).data.orgId;
  	}

  	function isSuperAdmin(userId, orgId) {
    	return userId in getOrgPermissions(orgId).superAdmins;
  	}

    function isOrgAdmin(userId, orgId) {
    	// /!\ Carefull, parentheses needed for operator precedence to work
    	return (userId in getOrgPermissions(orgId).admins)
        || isSuperAdmin(userId, orgId);
    }

    function getOrgDocumentPermissions(orgId, docId) {
    	return getAfter(/databases/$(database)/documents/permissions/$(orgId)/orgDocsPermissions/$(docId)).data;
    }

    function getOrgPermissions(orgId) {
    	return get(/databases/$(database)/documents/permissions/$(orgId)).data;
    }

    function getUserDocumentPermissions(orgId, docId) {
      return get(/databases/$(database)/documents/permissions/$(orgId)/userDocsPermissions/$(docId)).data;
    }

		// Parameter "action" can either be "canCreate", "canRead", "canUpdate" or "canDelete"
    function orgCan(action, orgId, docId) {
      return (getOrgDocumentPermissions(orgId, docId).owner == orgId)
        || (getOrgDocumentPermissions(orgId, docId).admin == true)
        || (getOrgDocumentPermissions(orgId, docId)[action] == true);
    }

    function userCan(action, userId, orgId, docId) {
      return isOrgAdmin(userId, orgId)
      	|| (userId in getOrgPermissions(orgId)[action])
        || (userId in getUserDocumentPermissions(orgId, docId).admins)
        || (userId in getUserDocumentPermissions(orgId, docId)[action]);
    }
  }
}
