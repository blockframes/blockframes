service cloud.firestore {
  match /databases/{database}/documents {

  	match /orgs/{orgId} {
    	allow write: if isSuperAdmin() && incomingData().id == existingData().id; // TODO: use isOrgMember() function
      allow read: if true; // TODO: use isOrgMember() function
    }

    match /users/{userId} {
    	allow read: if isUserId(userId);
      allow update: if isUserId(userId)
      							&& incomingData().uid == existingData().uid
                    && incomingData().email == existingData().email;
    }

    match /notifications/{notificationId} {
  		allow read: if isUserId(existingData().userId);
      allow update: if isUserId(existingData().userId);
    }

    match /rights/{orgId} {
    	allow write: if isSuperAdmin() && isOrgMember(orgId) && incomingData().id == existingData().id;
      allow read: if true; // TODO: use isOrgMember() function
    }

    // User and Admins rights in specific delivery and materials sub-collection
    match /deliveries/{deliveryId} {
      allow read, write: if (isSuperAdmin() && orgIsAdmin(deliveryId))
      									 || (isDeliveriesAdmin() && orgIsAdmin(deliveryId));

    	allow create: if (orgCanCreate(deliveryId) && canCreateDocument(getDeliveryPath(deliveryId)))
                    || (orgCanCreate(deliveryId) && isDeliveriesAdmin())
                    || (orgCanCreate(deliveryId) && isSuperAdmin());

      allow read: if (orgCanRead(deliveryId) && canReadDocument(getDeliveryPath(deliveryId)))
      						|| (orgCanRead(deliveryId) && isDeliveriesAdmin())
                  || (orgCanRead(deliveryId) && isSuperAdming());


      allow update: if (orgCanUpdate(deliveryId) && canUpdateDocument(getDeliveryPath(deliveryId)))
                    || (orgCanUpdate(deliveryId) && isDeliveriesAdmin())
                    || (orgCanUpdate(deliveryId) && isSuperAdmin());

      allow delete: if (orgCanDelete(deliveryId) && canDeleteDocument(getDeliveryPath(deliveryId)))
                    || (orgCanDelete(deliveryId) && isDeliveriesAdmin())
                    || (orgCanDelete(deliveryId) && isSuperAdmin());
    }

    // User and Admins in specific template and materials sub-collection
    match /templates/{templateId} {
      allow read, write: if (isSuperAdmin() && orgIsAdmin(templateId))
      									 || (isTemplatesAdmin() && orgIsAdmin(templateId));

    	allow create: if (orgCanCreate(templateId) && canCreateDocument(getTemplatePath(templateId)))
                    || (orgCanCreate(templateId) && isTemplatesAdmin())
                    || (orgCanCreate(templateId) && isSuperAdmin());

      allow read: if (orgCanRead(templateId) && canReadDocument(getTemplatePath(templateId)))
                  || (orgCanRead(templateId) && isTemplatesAdmin())
                  || (orgCanRead(templateId) && isSuperAdmin());

      allow update: if (orgCanUpdate(templateId) && canUpdateDocument(getTemplatePath(templateId)))
                    || (orgCanUpdate(templateId) && isTemplatesAdmin())
                    || (orgCanUpdate(templateId) && isSuperAdmin());


      allow delete: if (orgCanDelete(templateId) && canDeleteDocument(getTemplatePath(templateId)))
                    || (orgCanDelete(templateId) && isTemplatesAdmin())
                    || (orgCanDelete(templateId) && isSuperAdmin());
    }

    // User rights in specific movie and materials sub-collection
    match /movies/{movieId} {
    	allow read: if true;
      allow read, write: if (isSuperAdmin() && orgIsAdmin(movieId))
      									 || (isMoviesAdmin() && orgIsAdmin(movieId));

    	allow create: if (orgCanCreate(movieId) && canCreateDocument(getMoviePath(movieId)))
                    || (orgCanCreate(movieId) && isMoviesAdmin())
                    || (orgCanCreate(movieId) && isSuperAdmin());

      allow read: if (orgCanRead(movieId) && canReadDocument(getMoviePath(movieId)))
                  || (orgCanRead(movieId) && isMoviesAdmin())
                  || (orgCanRead(movieId) && isSuperAdmin());

      allow update: if (orgCanUpdate(movieId) && canUpdateDocument(getMoviePath(movieId)))
                    || (orgCanUpdate(movieId) && isMoviesAdmin())
                    || (orgCanUpdate(movieId) && isSuperAdmin());

      allow delete: if (orgCanDelete(movieId) && canDeleteDocument(getMoviePath(movieId)))
                    || (orgCanDelete(movieId) && isMoviesAdmin())
                    || (orgCanDelete(movieId) && isSuperAdmin());
    }

    // GLOBAL FUNCTIONS

    function existingData() {
      return resource.data;
    }

    function incomingData() {
      return request.resource.data;
    }

    function currentUser() {
      return request.auth;
    }

    function isSignedIn() {
      return currentUser() != null;
    }

    function isUserId(userId) {
    	return currentUser().uid == userId;
    }

    // Works only if orgId field exists in user document
    function userExists() {
      return exists(/databases/$(database)/documents/users/$(currentUser().uid));
    }

  	function getUserOrg() {
    	return get(/databases/$(database)/documents/users/$(currentUser().uid)).data.orgId;
  	}

    function docExists(docId) {
    	return exists(/databases/$(database)/documents/rights/$(getUserOrg())/docs/$(docId));

    }

    function isOrgMember(orgId) {
    	return isSignedIn() && userExists() && currentUser().uid in
      	get(/databases/$(database)/documents/orgs/$(orgId)).data.userIds;
    }

  	function isSuperAdmin() {
    	return isSignedIn() && userExists() && currentUser().uid ==
    		get(/databases/$(database)/documents/rights/$(getUserOrg())).data.superAdminId;
  	}


    function getOrgsDocumentRights(docId) {
    	return get(/databases/$(database)/documents/rights/$(getUserOrg())/docs/$(docId)).data;
    }

    // GLOBAL DOCUMENTS FUNCTIONS

    function canCreateDocument(document) {
  		return isSignedIn() && userExists() && docExists(document.id) && currentUser().uid in document.data.canCreate;
  	}

    function canReadDocument(document) {
  		return isSignedIn() && userExists() && docExists(document.id) && currentUser().uid in document.data.canRead;
  	}

    function canUpdateDocument(document) {
  		return isSignedIn() && userExists() && docExists(document.id) && currentUser().uid in document.data.canUpdate;
  	}

    function canDeleteDocument(document) {
  		return isSignedIn() && userExists() && docExists(document.id) && currentUser().uid in document.data.canDelete;
  	}

    // ORGS FUNCTIONS
    // Checks if an org can perfom an action in a document where it is not admin

    function orgCanCreate(docId) {
      return get(/databases/$(database)/documents/rights/$(getUserOrg())/docs/$(docId))
      			 	 .data.canCreate == true;
    }

    function orgCanRead(docId) {
    	return getOrgsDocumentRights(docId).canRead == true;
    }

    function orgCanUpdate(docId) {
    	return getOrgsDocumentRights(docId).canUpdate == true;
    }

    function orgCanDelete(docId) {
    	return getOrgsDocumentRights(gdocId).canDelete == true;
    }

    function orgIsAdmin(docId) {
    	return getOrgsDocumentRights(docId).isAdmin == true;
    }

  	// DELIVERIES FUNCTIONS

  	function isDeliveriesAdmin() {
  		return isSignedIn() && userExists() && currentUser().uid in
    		get(/databases/$(database)/documents/rights/$(getUserOrg())/apps/deliveriesRights).data.admins;
  	}

    function getDeliveryPath(deliveryId) {
    	return get(/databases/$(database)/documents
      	/rights/$(getUserOrg())/apps/deliveriesRights/deliveryDocRights/$(deliveryId));
    }

    // TEMPLATES FUNCTIONS

  	function isTemplatesAdmin() {
  		return isSignedIn() && userExists() && currentUser().uid in
    		get(/databases/$(database)/documents/rights/$(getUserOrg())/apps/templatesRights).data.admins;
  	}

    function getTemplatePath(templateId) {
    	return get(/databases/$(database)/documents
      	/rights/$(getUserOrg())/apps/templatesRights/templateDocRights/$(templateId));
    }

    // MOVIES FUNCTIONS

  	function isMoviesAdmin() {
  		return isSignedIn() && userExists() && currentUser().uid in
    		get(/databases/$(database)/documents/rights/$(getUserOrg())/apps/moviesRights).data.admins;
  	}

    function getMoviePath(movieId) {
    	return get(/databases/$(database)/documents
      	/rights/$(getUserOrg())/apps/moviesRights/movieDocRights/$(movieId));
    }

  }
}
