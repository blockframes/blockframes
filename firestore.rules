service cloud.firestore {
  match /databases/{database}/documents {

    // User and Admins rights in specific delivery and materials sub-collection
    match /deliveries/{deliveryId}/{restOfPath=**} {
      allow read, write: if isSuperAdmin() && orgIsAdmin(deliveryId)
      									 || isDeliveriesAdmin() && orgIsAdmin(deliveryId);

    	allow create: if orgCanCreate(deliveryId) && canCreateDocument(getDeliveryPath(deliveryId))
                    || orgCanCreate(deliveryId) && isDeliveriesAdmin()
                    || orgCanCreate(deliveryId) && isSuperAdmin();

      allow read: if orgCanRead(deliveryId) && canReadDocument(getDeliveryPath(deliveryId))
      						|| orgCanRead(deliveryId) && isDeliveriesAdmin()
                  || orgCanRead(deliveryId) && isSuperAdming();


      allow update: if orgCanUpdate(deliveryId) && canUpdateDocument(getDeliveryPath(deliveryId))
                    || orgCanUpdate(deliveryId) && isDeliveriesAdmin()
                    || orgCanUpdate(deliveryId) && isSuperAdmin();

      allow delete: if orgCanDelete(deliveryId) && canDeleteDocument(getDeliveryPath(deliveryId))
                    || orgCanDelete(deliveryId) && isDeliveriesAdmin()
                    || orgCanDelete(deliveryId) && isSuperAdmin();
    }

    // User and Admins in specific template and materials sub-collection
    match /templates/{templateId}/{restOfPath=**} {
      allow read, write: if isSuperAdmin() && orgIsAdmin(templateId)
      									 || isTemplatesAdmin() && orgIsAdmin(templateId);

    	allow create: if orgCanCreate(templateId) && canCreateDocument(getTemplatePath(templateId))
                    || orgCanCreate(templateId) && isTemplatesAdmin()
                    || orgCanCreate(templateId) && isSuperAdmin();

      allow read: if orgCanRead(templateId) && canReadDocument(getTemplatePath(templateId))
                  || orgCanRead(templateId) && isTemplatesAdmin()
                  || orgCanRead(templateId) && isSuperAdmin();

      allow update: if orgCanUpdate(templateId) && canUpdateDocument(getTemplatePath(templateId))
                    || orgCanUpdate(templateId) && isTemplatesAdmin()
                    || orgCanUpdate(templateId) && isSuperAdmin();


      allow delete: if orgCanDelete(templateId) && canDeleteDocument(getTemplatePath(templateId))
                    || orgCanDelete(templateId) && isTemplatesAdmin()
                    || orgCanDelete(templateId) && isSuperAdmin();
    }

    // User rights in specific movie and materials sub-collection
    match /movies/{movieId}/{restOfPath=**} {
      allow read, write: if isSuperAdmin() && orgIsAdmin(movieId)
      									 || isMoviesAdmin() && orgIsAdmin(movieId);

    	allow create: if orgCanCreate(movieId) && canCreateDocument(getMoviePath(movieId))
                    || orgCanCreate(movieId) && isMoviesAdmin()
                    || orgCanCreate(movieId) && isSuperAdmin();

      allow read: if orgCanRead(movieId) && canReadDocument(getMoviePath(movieId))
                  || orgCanRead(movieId) && isMoviesAdmin()
                  || orgCanRead(movieId) && isSuperAdmin();

      allow update: if orgCanUpdate(movieId) && canUpdateDocument(getMoviePath(movieId))
                    || orgCanUpdate(movieId) && isMoviesAdmin()
                    || orgCanUpdate(movieId) && isSuperAdmin();

      allow delete: if orgCanDelete(movieId) && canDeleteDocument(getMoviePath(movieId))
                    || orgCanDelete(movieId) && isMoviesAdmin()
                    || orgCanDelete(movieId) && isSuperAdmin();
    }

    // GLOBAL FUNCTIONS

    function isAuthenticated() {
      return request.auth != null;
    }

    // Works only if orgId field exists in user document
    function userExists() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }

  	function getUserOrg() {
    	return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.orgId;
  	}

    function docExists(docId) {
    	return exists(/databases/$(database)/documents/rights/$(getUserOrg())/docs/($docId));

    }
  	function isSuperAdmin() {
    	return isAuthenticated() && userExists() && request.auth.uid ==
    		get(/databases/$(database)/documents/rights/$(getUserOrg())).data.superAdminId;
  	}


    function getOrgsDocumentRights(orgId, docId) {
    	return get(/databases/$(database)/documents/rights/$(orgId)/docs/$(docId));
    }

    // GLOBAL DOCUMENTS FUNCTIONS

    function canCreateDocument(document) {
  		return isAuthenticated() && userExists() && request.auth.uid in document.data.canCreate;
  	}

    function canReadDocument(document) {
  		return isAuthenticated() && userExists() && request.auth.uid in document.data.canRead;
  	}

    function canUpdateDocument(document) {
  		return isAuthenticated() && userExists() && request.auth.uid in document.data.canUpdate;
  	}

    function canDeleteDocument(document) {
  		return isAuthenticated() && userExists() && request.auth.uid in document.data.canDelete;
  	}

    // ORGS FUNCTIONS
    // Checks if an org can perfom an action in a document where it is not admin

    function orgCanCreate(docId) {
      return getOrgsDocumentRights(getUserOrg(), docId).data.canCreate == true;
    }

    function orgCanRead(docId) {
    	return getOrgsDocumentRights(getUserOrg(), docId).data.canRead == true;
    }

    function orgCanUpdate(docId) {
    	return getOrgsDocumentRights(getUserOrg(), docId).data.canUpdate == true;
    }

    function orgCanDelete(docId) {
    	return getOrgsDocumentRights(getUserOrg(), docId).data.canDelete == true;
    }

    function orgIsAdmin(docId) {
    	return getOrgsDocumentRights(getUserOrg(), docId).data.isAdmin == true;
    }

  	// DELIVERIES FUNCTIONS

  	function isDeliveriesAdmin() {
  		return isAuthenticated() && userExists() && request.auth.uid in
    		get(/databases/$(database)/documents/rights/$(getUserOrg())/apps/deliveriesRights).data.admins;
  	}

    function getDeliveryPath(deliveryId) {
    	return get(/databases/$(database)/documents
      	/rights/$(getUserOrg())/apps/deliveriesRights/deliveryDocRights/$(deliveryId));
    }

    // TEMPLATES FUNCTIONS

  	function isTemplatesAdmin() {
  		return isAuthenticated() && userExists() && request.auth.uid in
    		get(/databases/$(database)/documents/rights/$(getUserOrg())/apps/templatesRights).data.admins;
  	}

    function getTemplatePath(templateId) {
    	return get(/databases/$(database)/documents
      	/rights/$(getUserOrg())/apps/templatesRights/templateDocRights/$(templateId));
    }

    // MOVIES FUNCTIONS

  	function isMoviesAdmin() {
  		return isAuthenticated() && userExists() && request.auth.uid in
    		get(/databases/$(database)/documents/rights/$(getUserOrg())/apps/moviesRights).data.admins;
  	}

    function getMoviePath(movieId) {
    	return get(/databases/$(database)/documents
      	/rights/$(getUserOrg())/apps/moviesRights/movieDocRights/$(movieId));
    }

  }
}
