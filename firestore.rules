rules_versions = '2';
service cloud.firestore {
  match /databases/{database}/documents {


    /// USERS RULES ///

    match /users/{userId} {
    	allow read, update: if isSignedIn(); // Secure it as soon as we got Inivitations collection
    	allow create: if currentUser().uid == existingData().uid
				|| currentUser().uid == incomingData().uid;
    }

    /// NOTIFICATIONS RULES ///

    match /notifications/{notificationId} {
    	allow read: if currentUser().uid == existingData().userId
    }

    /// ORGANIZATION RULES ///

    match /orgs/{orgId} {
    	allow create: if isSignedIn()
      allow get: if isSuperAdmin(orgId) || isOrgAdmin(orgId)
    	allow update, delete: if isSuperAdmin(orgId)
      	&& existingData().name == incomingData().name
        && existingData().id == incomingData().id
      allow update: if isOrgAdmin(orgId)
      	&& existingData().name == incomingData().name
        && existingData().id == incomingData().id
    }

    /// PERMISSIONS RULES ///

    match /permissions/{orgId} {
    	allow create: if isSignedIn()
    	allow read, update, delete: if isSuperAdmin(orgId)
        || isOrgAdmin(orgId)

      match /{documents=**} {
      	allow read, create: if isSignedIn()
    		allow read, update, delete: if isSuperAdmin(orgId)
          || isOrgAdmin(orgId)
      }
    }

    /// MOVIES RULES ///

    match /movies/{movieId}/{documents=**} {
    	allow create: if orgCan('canCreate', getUserOrgId(), movieId) && userCan('canCreate', userId(), getUserOrgId(), movieId);
      allow read: if orgCan('canRead', getUserOrgId(), movieId) && userCan('canRead', userId(), getUserOrgId(), movieId);
    	allow update: if orgCan('canUpdate', getUserOrgId(), movieId) && userCan('canUpdate', userId(), getUserOrgId(), movieId);
      allow delete: if orgCan('canDelete', getUserOrgId(), movieId) && userCan('canDelete', userId(), getUserOrgId(), movieId);
    }

    /// DELIVERIES RULES ///

    match /deliveries/{deliveryId} {
    	allow create, list: if isSuperAdmin(getUserOrgId())
        || isOrgAdmin(getUserOrgId())
    	allow read, update, delete: if isSignedIn()
        && getOrgsDocumentPermissions(deliveryId).owner == getUserOrgId()

      match /{documents=**} {
        allow create: if isSuperAdmin(getUserOrgId())
          || isOrgAdmin(getUserOrgId())
        allow read, update, delete: if isSignedIn()
      }
    }

    // TEMPLATES RULES //

    match /templates/{templateId} {
    	allow create: if isSuperAdmin(getUserOrgId())
        || isOrgAdmin(getUserOrgId())
    	allow read, update, delete: if isSignedIn()
        && getOrgsDocumentPermissions(templateId).owner == getUserOrgId()

      match /{documents=**} {
        allow create: if isSuperAdmin(getUserOrgId())
          || isOrgAdmin(getUserOrgId())
        allow read, update, delete: if isSignedIn()
          && getOrgsDocumentPermissions(templateId).owner == getUserOrgId()
      }
    }

    // FUNCTIONS //

    function existingData() {
      return resource.data;
    }

    function incomingData() {
      return request.resource.data;
    }

    function currentUser() {
      return request.auth;
    }

    function userId() {
      return request.auth.uid;
    }

    function isSignedIn() {
      return currentUser() != null;
    }

  	function getUserOrgId() {
    	return get(/databases/$(database)/documents/users/$(userId()).data.orgId;
  	}

  	function isSuperAdmin(userId, orgId) {
    	return userId in getOrgPermissions(orgId).superAdmins;
  	}

    function isOrgAdmin(userId, orgId) {
    	return userId in getOrgPermissions(orgId).admins
        || isSuperAdmin(userId, OrgId);
    }

    function getOrgDocumentPermissions(orgId, docId) {
    	return get(/databases/$(database)/documents/permissions/$(orgId)/orgDocsPermissions/$(docId)).data;
    }

    function getOrgPermissions(orgId) {
    	return get(/databases/$(database)/documents/permissions/$(orgId)).data;
    }

    function getUserDocumentPermissions(orgId, docId) {
      return get(/databases/$(database)/documents/permissions/$(orgId)/userDocsPermissions/$(docId)).data;
    }

    function orgCan(x, orgId, docId) {
      return getOrgDocumentPermissions(orgId, docId).owner == orgId
        || getOrgDocumentPermissions(orgId, docId).admin == true
        || getOrgDocumentPermissions(orgId, docId)[x] == true;
    }

    function userCan(x, userId, orgId, docId) {
      return isOrgAdmin(userId, orgId)
        || userId in getOrgPermissions(orgId).[x]
        || userId in getUserDocumentPermissions(orgId, docId).admins
        || userId in getUserDocumentPermissions(orgId, docId)[x];
    }
  }
}

/////////////////////
// DEPLOYING RULES //
/////////////////////

// firebase init firestore
// firebase deploy --only firestore:rules
