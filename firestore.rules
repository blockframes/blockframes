rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Note: Add a verification of each document ID => {id: ID_SHOULD_BE_EQUAL_TO_PATH}

    /// USERS RULES ///

    match /users/{userId} {
    	allow read: if isSignedIn()
        && userExists(userId)
        && userId() == existingData().uid;
    	allow update: if isSignedIn()
        && userExists(userId)
        && userId() == incomingData().uid,
        && userId() == existingData().uid;
    	allow create: if userId() == incomingData().uid;
      allow delete: if isSignedIn()
        && userExists(userId)
        && userId() == existingData().uid;
    }

    /// NOTIFICATIONS RULES ///

    match /notifications/{notificationId} {
    	allow read, update: if userId() == existingData().userId
      	|| userOrgId() == existingData().organization.id;
    	allow create, delete: if false;
    }

    /// INVITATIONS RULES ///

    match /invitations/{invitationId} {
    	allow read: if userId() == existingData().user.uid
      	|| userOrgId() == existingData().organization.id;
    	allow update, create: if userId() == incomingData().user.uid
      	|| userOrgId() == incomingData().organization.id;
      allow delete: if isOrgAdmin(userId(), orgId) || userId() == existingData().user.uid;
    }

    /// ORGANIZATION RULES ///

    match /orgs/{orgId} {
    	allow create: if isSignedIn()
        && incomingData().status == 'pending';
      allow update: if isSignedIn()
        && isOrgAdmin(userId(), orgId)
        && incomingData().status == existingData().status
        && incomingData().id == existingData().id;
      allow delete: if isSuperAdmin(userId(), orgId);
      allow read: if isSignedIn();

      match /baskets/{basketId} {
      	allow read: if isOrgMember(userId(), orgId);
        allow create: if isOrgMember(userId(), orgId);
        allow update: if isOrgMember(userId(), orgId);
        allow delete: if isOrgAdmin(userId(), orgId);
      }
    }

    /// PERMISSIONS RULES ///
    // We should create/update/delete with firebase functions only
    match /permissions/{orgId} {
    	allow read: if isOrgMember(orgId);
      allow write: if isOrgAdmin(userId(), orgId) && incomingData().id == orgId;

      match /{documents=**} {
      	allow read, write;
      }
    }

    /// MOVIES RULES ///

    match /movies/{movieId} {
      allow read: if userHasValidOrg();
      allow create: if userHasValidOrg();
      allow update: if getDocumentPermissions(userOrgId(), movieId).ownerId == userOrgId()
      	&& isOrgAdmin(userId(), userOrgId());
      allow delete: if getDocumentPermissions(userOrgId(), movieId).ownerId == userOrgId()
      	&& isSuperAdmin(userId(), userOrgId());

      match /{documents=**} {
      	allow read: if userHasValidOrg();
        allow create: if userHasValidOrg();
        allow update: if getDocumentPermissions(userOrgId(), movieId).ownerId == userOrgId()
      	  && isOrgAdmin(userId(), userOrgId());
        allow delete: if getDocumentPermissions(userOrgId(), movieId).ownerId == userOrgId()
      	  && isSuperAdmin(userId(), userOrgId());
      }
    }

    /////////////////
    /// FUNCTIONS ///
    /////////////////

    function existingData() {
      return resource.data;
    }

    function incomingData() {
      return request.resource.data;
    }

    function userId() {
      return request.auth.uid;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function userExists(userId) {
      return exists(/databases/$(database)/documents/users/$(userId));
    }

  	function userOrgId() {
    	return get(/databases/$(database)/documents/users/$(userId())).data.orgId;
  	}

    function userHasValidOrg() {
    	return get(/databases/$(database)/documents/orgs/$(userOrgId())).data.status == "accepted";
    }

  	function isSuperAdmin(userId, orgId) {
    	return getOrgPermissions(orgId).roles[userId] == "superAdmin";
  	}

    function isOrgAdmin(userId, orgId) {
    	// /!\ Carefull, parentheses needed for operator precedence to work
    	return (getOrgPermissions(orgId).roles[userId] == "admin")
        || isSuperAdmin(userId, orgId);
    }

    function isOrgMember(userId, orgId) {
    	return (getOrgPermissions(orgId).roles[userId] == "member")
      	|| isOrgAdmin(userId, orgId);
    }

    function getDocumentPermissions(orgId, docId) {
    	return get(/databases/$(database)/documents/permissions/$(orgId)/documentPermissions/$(docId)).data;
    }

    function getOrgPermissions(orgId) {
    	return get(/databases/$(database)/documents/permissions/$(orgId)).data;
    }

		// Parameter "action" can either be "canCreate", "canRead", "canUpdate" or "canDelete"
    function orgCan(action, orgId, docId) {
      return (getOrgDocumentPermissions(orgId, docId).owner == orgId)
        || (getOrgDocumentPermissions(orgId, docId).admin == true)
        || (getOrgDocumentPermissions(orgId, docId)[action] == true);
    }
  }
}
