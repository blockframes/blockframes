rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {


    /// USERS RULES ///

    match /users/{userId} {
    	allow read, update: if isSignedIn(); // Secure it as soon as we got Inivitations collection
    	allow create: if currentUser().uid == existingData().uid
				|| currentUser().uid == incomingData().uid;
      allow delete: if false;
    }

    /// NOTIFICATIONS RULES ///

    match /notifications/{notificationId} {
    	allow read: if currentUser().uid == existingData().userId;
    }

    /// ORGANIZATION RULES ///

    match /orgs/{orgId} {
    	allow create: if isSignedIn() && userOrgId() == null;
      allow read, update, delete: if isSuperAdmin(userId(), orgId)
      	|| isOrgAdmin(userId(), orgId);
    }

    /// PERMISSIONS RULES ///
		// What about moving permissions CRUD into firebase functions
    match /permissions/{orgId}/{documents=**} {
    	allow read, write;
    }

    /// MOVIES RULES ///

    match /movies/{movieId} {
    	allow create: if orgCan('canCreate', userOrgId(), movieId)
        && userCan('canCreate', userId(), userOrgId(), movieId);
      allow read: if orgCan('canRead', userOrgId(), movieId)
        && userCan('canRead', userId(), userOrgId(), movieId);
    	allow update: if orgCan('canUpdate', userOrgId(), movieId)
        && userCan('canUpdate', userId(), userOrgId(), movieId);
      allow delete: if orgCan('canDelete', userOrgId(), movieId)
        && userCan('canDelete', userId(), userOrgId(), movieId);

        match /{documents=**} {
        allow read, write;
        }
    }

    /// DELIVERIES RULES ///

    match /deliveries/{deliveryId} {
    	allow create: if orgCan('canCreate', userOrgId(), deliveryId)
        && userCan('canCreate', userId(), userOrgId(), deliveryId);
      allow read: if orgCan('canRead', userOrgId(), deliveryId)
        && userCan('canRead', userId(), userOrgId(), deliveryId);
    	allow update: if orgCan('canUpdate', userOrgId(), deliveryId)
        && userCan('canUpdate', userId(), userOrgId(), deliveryId);
      allow delete: if orgCan('canDelete', userOrgId(), deliveryId)
        && userCan('canDelete', userId(), userOrgId(), deliveryId);

      match /{documents=**} {
        allow read, write;
      }
    }

    // TEMPLATES RULES //

    match /templates/{templateId} {
    	allow create: if orgCan('canCreate', userOrgId(), templateId)
        && userCan('canCreate', userId(), userOrgId(), templateId);
      allow read: if orgCan('canRead', userOrgId(), templateId)
        && userCan('canRead', userId(), userOrgId(), templateId);
    	allow update: if orgCan('canUpdate', userOrgId(), templateId)
        && userCan('canUpdate', userId(), userOrgId(), templateId);
      allow delete: if orgCan('canDelete', userOrgId(), templateId)
        && userCan('canDelete', userId(), userOrgId(), templateId);

      match /{documents=**} {
        allow read, write;
      }
    }

    // FUNCTIONS //

    function existingData() {
      return resource.data;
    }

    function incomingData() {
      return request.resource.data;
    }

    function currentUser() {
      return request.auth;
    }

    function userId() {
      return currentUser().uid;
    }

    function isSignedIn() {
      return currentUser() != null;
    }

  	function userOrgId() {
    	return get(/databases/$(database)/documents/users/$(userId())).data.orgId;
  	}

  	function isSuperAdmin(userId, orgId) {
    	return userId in getOrgPermissions(orgId).superAdmins;
  	}

		// TODO: Figure out why this always return false
    // function isOrgAdmin(userId, orgId) {
    // 	return userId in getOrgPermissions(orgId).admins || isSuperAdmin(userId, orgId);
    // }

    function isOrgAdmin(userId, orgId) {
    	return userId in getOrgPermissions(orgId).admins;
    }

    function getOrgDocumentPermissions(orgId, docId) {
    	return get(/databases/$(database)/documents/permissions/$(orgId)/orgDocsPermissions/$(docId)).data;
    }

    function getOrgPermissions(orgId) {
    	return get(/databases/$(database)/documents/permissions/$(orgId)).data;
    }

    function getUserDocumentPermissions(orgId, docId) {
      return get(/databases/$(database)/documents/permissions/$(orgId)/userDocsPermissions/$(docId)).data;
    }

    function orgCan(x, orgId, docId) {
      return getOrgDocumentPermissions(orgId, docId).owner == orgId
        || getOrgDocumentPermissions(orgId, docId).admin == true
        || getOrgDocumentPermissions(orgId, docId)[x] == true;
    }

    function userCan(x, userId, orgId, docId) {
      return isOrgAdmin(userId, orgId)
      	|| isSuperAdmin(userId, orgId)
        || userId in getOrgPermissions(orgId)[x]
        || userId in getUserDocumentPermissions(orgId, docId).admins
        || userId in getUserDocumentPermissions(orgId, docId)[x];
    }
  }
}


/////////////////////
// DEPLOYING RULES //
/////////////////////
//
// firebase init firestore
// firebase deploy --only firestore:rules
//
// OR
//
// Copy and paste these rules into the rules tab of your project database
