rules_version = '2';

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                               DATABASE RULES                                        ///
///                              This document describes the database rules                             ///
///  Documentation @see https://www.notion.so/cascade8/Database-rules-80024b4805b74e1a98ac154f4afeaad7  ///
///////////////////////////////////////////////////////////////////////////////////////////////////////////

service cloud.firestore {
  match /databases/{database}/documents {


    ////////////////////////////////
    // Blockframes Administrators //
    ////////////////////////////////

    /// RULES ///

    // blockframes admins can access ALL the db.
    // this overwrides every other rules.
    match /{document=**} {
      allow read, write: if isBlockframesAdmin(userId()) && notInMaintenance();
    }

    match /blockframesAdmin/{userId} {
      allow read: if ( userId() == userId || (isSignedInWithPassword() && isOrgMember(orgIdOf(userId))) ) && notInMaintenance();
      allow write: if false;
    }

    /// FUNCTIONS ///

    function isBlockframesAdmin(userId) {
      return exists(/databases/$(database)/documents/blockframesAdmin/$(userId));
    }


    ////////////////////////////////
    // Commons Collections        //
    ////////////////////////////////


    match /docsIndex/{docId} {
      // index of every doc created with a permission doc associated
      // essential for isBrandNewDocument.
      allow read, write: if false;
    }

    match /_META/_MAINTENANCE {
      allow read: if true;
      allow write: if false;
    }

    match /_META/_APP {
      allow read: if true;
      allow write: if false;
    }

    match /_META/_ALGOLIA_ANONYMOUS_SEARCH_KEY {
      allow read: if isSignedIn() && notInMaintenance();
      allow write: if false;
    }

    match /_META/_ALGOLIA_SEARCH_KEY {
      allow read: if userHasValidOrg() && notInMaintenance();
      allow write: if false;
    }

    /////////////////////////////////////////////////////////////////////////////////
    ///                                 COLLECTIONS                               ///
    ///             rules defined at the collections or document level            ///
    /////////////////////////////////////////////////////////////////////////////////


    ////////////////////////////////
    // USER RULES                 //
    ////////////////////////////////

    /// RULES ///

    match /users/{userId} {
      allow get: if isSignedIn() && notInMaintenance();
    	allow list: if isSignedInWithPassword() && isOrgMember(orgIdOf(userId())) && notInMaintenance();
    	allow update: if isOnlyUpdatingAllowedUserFields() && notInMaintenance();
    	allow create: if userId() == incomingData().uid
        && isRequestFieldValueEqualTo(['uid'], userId) && notInMaintenance();
      allow delete: if userId() == existingData().uid && notInMaintenance();
    }

    /// FUNCTIONS ///

    function isOnlyUpdatingAllowedUserFields() {
      // Only "firstName" and "lastName" can be updated.
      return isSignedIn()
      	&& userId() == incomingData().uid
        && isNotUpdatingId('uid', existingData().uid)
        && isNotUpdatingField(['email'])
        && ( isNotUpdatingField(['orgId']) || isCreatingField(['orgId']))
    }

    ////////////////////////////////
    // NOTIFICATIONS RULES        //
    ////////////////////////////////

    /// RULES ///

    match /notifications/{notificationId} {
    	allow read: if userId() == existingData().toUserId
      && notInMaintenance();
    	allow update: if isOnlyMarkingNofitifcationAsRead()
      && notInMaintenance();
    	allow create, delete: if false;
    }

    /// FUNCTIONS ///

    function isOnlyMarkingNofitifcationAsRead() {
      // Only "app.isRead" can be updated.
      return userId() == existingData().toUserId
        && isNotUpdatingId('id', existingData().id)
        && isNotUpdatingField(['_meta', 'createdBy'])
        && isNotUpdatingField(['_meta', 'createdAt'])
        && isNotUpdatingField(['toUserId'])
        && isNotUpdatingField(['type'])
        // Notifications subjects
        && isNotUpdatingField(['docId'])
        && isNotUpdatingField(['user'])
        && isNotUpdatingField(['organization'])
        && isNotUpdatingField(['movies']);
    }

    ////////////////////////////////
    // INVITATIONS RULES          //
    ////////////////////////////////

    /// RULES ///

    match /invitations/{invitationId} {
      allow get: if existingData().type == 'attendEvent'
        && isSignedIn()
        && notInMaintenance();
    	allow list: if isAllowedToReadInvitation()
        && notInMaintenance();
      allow create: if isInvitationCreator()
        && isRequestFieldValueEqualTo(['status'], 'pending')
        && ( incomingData().mode == 'request' || (
            !incomingData().keys().hasAll(['docId']) // no docId
            || orgCan('isAdmin', userOrgId(), incomingData().docId) // user org is admin of docId
          )
        )
        && isRequestFieldValueEqualToOrNotSetted(['id'], invitationId)
        && notInMaintenance();
    	allow update: if  (
        isNotUpdatingCommonInvitationFields() && (
          isOnlyChangingInvitationWatchInfos()
          || isOnlyChangingInvitationStatus()
        )
      ) && notInMaintenance();
      allow delete: if isInvitationSender()
        && notInMaintenance();
    }

    /// FUNCTIONS ///

    function isAllowedToReadInvitation() {
      return (
        ( existingData().type == 'attendEvent' && isSignedInWithPassword() )
        || isConcerned() // is host or guest
      )
    }

    function isConcerned() {
      return (
        userId() == existingData().fromUser.uid
        || isOrgMember(existingData().fromOrg.id)
        || userId() == existingData().toUser.uid
        || isOrgMember(existingData().toOrg.id)
      )
    }

    // Check if current user or user org is the sender of the existing invitation.
    function isInvitationSender() {
      return isOrgMember(existingData().fromOrg.id)
        || userId() == existingData().fromUser.uid;
    }

    // Check if current user or user org is not creating an invitation on behalf of another user.
    function isInvitationCreator() {
      return isOrgMember(incomingData().fromOrg.id)
        || userId() == incomingData().fromUser.uid;
    }

    function isInvitationRecipient() {
      return userId() == existingData().toUser.uid
        || (existingData().type == 'joinOrganization' && isOrgAdmin(existingData().toOrg.id))
        || (existingData().type == 'attendEvent' && isOrgMember(existingData().toOrg.id));
    }

    function isOnlyChangingInvitationStatus() {
      return (
        isInvitationRecipient()
        && isNotUpdatingField(['watchInfos', 'duration'])
        && isNotUpdatingField(['watchInfos', 'date'])
      );
    }

    function isOnlyChangingInvitationWatchInfos() {
      return (
        existingData().type == 'attendEvent'
        && isNotUpdatingField(['status'])
    	);
    }

    function isNotUpdatingCommonInvitationFields() {
      return (
        isNotUpdatingId('id', existingData().id)
        && isNotUpdatingField(['mode'])
        && isNotUpdatingField(['fromOrg', 'id'])
        && isNotUpdatingField(['fromUser', 'uid'])
        && isNotUpdatingField(['toOrg', 'id'])
        && isNotUpdatingField(['toUser', 'uid'])
        && isNotUpdatingField(['eventId'])
        && isNotUpdatingField(['type'])
      );
    }


    ////////////////////////////////
    // ORGANIZATION RULES         //
    ////////////////////////////////

    /// RULES ///

    match /orgs/{orgId} {
      allow get: if isSignedIn()
        && notInMaintenance()
      allow list: if userHasValidOrg()
        && notInMaintenance();
    	allow create: if isSignedIn()
        && isRequestFieldValueEqualTo(['status'], 'pending')
        && isRequestFieldValueEqualToOrNotSetted(['id'], orgId)
        && notInMaintenance();
      allow update: if (isAdminAllowedToUpdateOrg() || isMemberAllowedToUpdateOrg())
        && notInMaintenance();
      allow delete: if false; // Allowed only to blockframesAdmin via CRM
    }

    /// FUNCTIONS ///

    // Org admins can update under specific conditions only
    function isAdminAllowedToUpdateOrg() {
      return isOrgAdmin(existingData().id)
      	&& isNotUpdatingField(['status'])
        && isNotUpdatingField(['_meta', 'createdBy'])
        && isNotUpdatingField(['_meta', 'createdAt'])
        && ( isNotUpdatingField(['appAccess']) || existingData().status == 'pending' )
        && isNotUpdatingId('id', existingData().id);
    }

    // Org members have less update possibilities than admis
    // but need to be able to update movieIds
    function isMemberAllowedToUpdateOrg() {
      return isOrgMember(existingData().id)
      	&& isNotUpdatingField(['status'])
        && isNotUpdatingField(['userIds'])
        && isNotUpdatingField(['_meta', 'createdBy'])
        && isNotUpdatingField(['_meta', 'createdAt'])
        && isNotUpdatingField(['appAccess'])
        && isNotUpdatingField(['email'])
        && isNotUpdatingId('id', existingData().id);
    }

    ////////////////////////////////
    // PERMISSIONS RULES          //
    ////////////////////////////////

    /// RULES ///

    match /permissions/{orgId} {
    	allow read: if isOrgMember(existingData().id) && notInMaintenance();
      allow create: if isRequestFieldValueEqualTo(['id'], orgId)
        && isCreatingOrganization(orgId)
        && notInMaintenance();
			allow update: if isOrgAdmin(existingData().id)
      	&& isNotUpdatingId('id', existingData().id)
        && notInMaintenance();

      match /documentPermissions/{docId} {
        allow read: if isOrgMember(orgId) && notInMaintenance();
        allow create: if isOrgMember(orgId)
          && isRequestFieldValueEqualTo(['id'], docId)
          && isBrandNewDocument(docId)
          && notInMaintenance();
        allow update: if isOrgAdmin(orgId)
          && isNotUpdatingId('id', existingData().id)
          && notInMaintenance();
      }
    }

    /// FUNCTIONS ///

    function isBrandNewDocument(docId) {
      // checks that no corresponding doc exists in the index (you have to get invited to create perm for a document that ALREADY exists)
      return !exists(/databases/$(database)/documents/docsIndex/$(docId));
    }

    ////////////////////////////////
    // MOVIES RULES               //
    ////////////////////////////////

    /// RULES ///

    match /movies/{movieId} {
      allow get: if isSignedIn()
        && notInMaintenance()
        && ( checkStatus(existingData(), 'accepted')
        || ( isOrgMember(userOrgId()) && ( userOrgId() in existingData().orgIds ))
        );
      allow list: if userHasValidOrg()
        && notInMaintenance()
        && ( checkStatus(existingData(), 'accepted')
        || ( isOrgMember(userOrgId()) && ( userOrgId() in existingData().orgIds ))
        );
      allow create: if userHasValidOrg()
        && checkAllStatusAreEqual(incomingData(), 'draft')
        && isRequestFieldValueEqualToOrNotSetted(['id'], movieId)
        && canCreateNewPermissions(userOrgId(), movieId)
        && notInMaintenance();
      allow update: if isAllowedToUpdateMovie() && notInMaintenance();
      allow delete: if false; // @TODO (#4301) Allowed only to blockframesAdmin via CRM for now
    }

    /// FUNCTIONS ///

    function isAllowedToUpdateMovie() {
      let orgId = userOrgId();
      let currAppAccess = existingData().app;
      let movie = incomingData();
      let newAppAccess = movie.app;
      return isOrgMember(orgId)
        && isNotUpdatingId('id', movie.id)
        && isNotUpdatingFieldDepth2(['_meta', 'createdBy'])
        && isNotUpdatingFieldDepth2(['_meta', 'createdAt'])
        && isNotUpdatingFieldDepth1(['_type'])
        && ( isNotUpdatingFieldDepth3(['app', 'catalog', 'status']) || ( currAppAccess.catalog.access == true && newAppAccess.catalog.status in ['submitted', 'draft', 'archived'] ) )
        && ( isNotUpdatingFieldDepth3(['app', 'waterfall', 'status']) || ( currAppAccess.waterfall.access == true && newAppAccess.waterfall.status in ['accepted'] ) )
        && ( isNotUpdatingFieldDepth3(['app', 'festival', 'status']) || ( currAppAccess.festival.access == true && newAppAccess.festival.status in ['submitted', 'draft', 'accepted', 'archived'] ) )
        // && ( isNotUpdatingFieldDepth3(['app', 'financiers', 'status']) || ( currAppAccess.financiers.access == true && newAppAccess.financiers.status in ['submitted', 'draft', 'archived'] ) )
        && ( isNotUpdatingFieldDepth3(['app', 'catalog', 'access']) || newAppAccess.catalog.access == false )
        && ( isNotUpdatingFieldDepth3(['app', 'waterfall', 'access']) || newAppAccess.waterfall.access == false )
        && ( isNotUpdatingFieldDepth3(['app', 'festival', 'access']) || newAppAccess.festival.access == false )
        // && ( isNotUpdatingFieldDepth3(['app', 'financiers', 'access']) || newAppAccess.financiers.access == false )
        && ( orgCan('canUpdate', orgId, movie.id) || isWaterfallAdmin(movie.id) );
    }

    function checkStatus(data, status) {
      return data.app.catalog.status == status
        || data.app.festival.status == status
        || data.app.financiers.status == status
        || data.app.waterfall.status == status;
    }

    function checkAllStatusAreEqual(data, status) {
      return data.app.catalog.status == status
        && data.app.festival.status == status
        && data.app.financiers.status == status
        // waterfall app is not checked because movies will always be "accepted"
    }

    function getMovie(movieId) {
      return get(/databases/$(database)/documents/movies/$(movieId)).data;
    }

    ////////////////////////////////
    // CONTRACTS RULES            //
    ////////////////////////////////

    /// RULES ///

    match /buckets/{bucketId} {
      allow read: if (userOrgId() == bucketId) && notInMaintenance();
      allow write: if (userOrgId() == bucketId) && notInMaintenance();
    }

    match /offers/{offerId} {
      allow read: if (userOrgId() == existingData().buyerId) && notInMaintenance();
      allow create: if (userOrgId() == incomingData().buyerId) && notInMaintenance();
      allow update: if false;
      allow delete: if false;
    }

    match /contracts/{contractId} {
      allow read: if isSignedInWithPassword() && notInMaintenance();
      allow create: if (userOrgId() == incomingData().buyerId
        || userOrgId() == incomingData().sellerId)
        && notInMaintenance();
      allow update: if (userOrgId() in existingData().stakeholders)
                    && onlyChange(['status', 'declineReason', 'termIds'])
                    && notInMaintenance();
      allow delete: if false;

      ////////////////////////////////
      // NEGOTIATION RULES            //
      ////////////////////////////////

      match /negotiations/{negotiationId} {
        allow create: if (userOrgId() == incomingData().createdByOrg) && notInMaintenance();
        allow read: if (userOrgId() in existingData().stakeholders) && notInMaintenance();
        allow update: if (userOrgId() != existingData().createdByOrg)
          && (userOrgId() in existingData().stakeholders)
          && onlyChange(['status', 'declineReason']) && notInMaintenance();
        allow delete: if false;
      }
    }

    match /terms/{termId} {
      allow read: if isSignedInWithPassword() && notInMaintenance();
      allow create: if (
          userOrgId() == getContract(incomingData().contractId).buyerId || 
          userOrgId() == getContract(incomingData().contractId).sellerId || 
          canUpdateWaterfallDocument(incomingData().titleId, incomingData().contractId)
        )
        && notInMaintenance();
      allow update: if (
          userOrgId() == getContract(existingData().contractId).sellerId ||
          canUpdateWaterfallDocument(existingData().titleId, existingData().contractId)
        )
        && notInMaintenance();
      allow delete: if canUpdateWaterfallDocument(existingData().titleId, existingData().contractId) && notInMaintenance();
    }

    match /incomes/{incomeId} {
      allow read: if (
          userOrgId() in getContract(existingData().contractId).stakeholders || 
          isWaterfallMember(existingData().titleId)
        )
        && notInMaintenance();
      allow create: if (
          userOrgId() == getContract(incomingData().contractId).buyerId || 
          canUpdateWaterfallDocument(incomingData().titleId, incomingData().contractId)
        )
        && notInMaintenance();
      allow update: if canUpdateWaterfallDocument(existingData().titleId, existingData().contractId) && notInMaintenance();
      allow delete: if canUpdateWaterfallDocument(existingData().titleId, existingData().contractId) && notInMaintenance();
    }

    match /expenses/{expenseId} {
      allow read: if isWaterfallMember(existingData().titleId) && notInMaintenance();
      allow create: if canUpdateWaterfallDocument(incomingData().titleId, incomingData().contractId) && notInMaintenance();
      allow update: if canUpdateWaterfallDocument(existingData().titleId, existingData().contractId) && notInMaintenance();
      allow delete: if canUpdateWaterfallDocument(existingData().titleId, existingData().contractId) && notInMaintenance();
    }

    // Get the data of an existing contract
    function getContract(contractId) {
      return get(/databases/$(database)/documents/contracts/$(contractId)).data;
    }

    ////////////////////////////////
    // EVENTS RULES               //
    ////////////////////////////////

    /// EVENTS RULES ///
    match /events/{eventId} {
    	allow get: if isSignedIn() && notInMaintenance();
      allow list: if userHasValidOrg() && notInMaintenance();
      allow create: if userHasValidOrg()
        && isRequestFieldValueEqualToOrNotSetted(['id'], eventId)
        && isRequestFieldValueEqualTo(['ownerOrgId'], userOrgId())
        && notInMaintenance();
      allow update: if isNotUpdatingId('id', existingData().id)
        && (
            ( userHasValidOrg() && existingData().ownerOrgId == userOrgId())
            || (
              isSignedIn() &&
              (
                isRequestFieldValueEqualTo(['meta', 'attendees', userId(), 'status'], 'requesting')
                || isRequestFieldValueEqualTo(['meta', 'attendees', userId(), 'status'], 'ended')
                || isRequestFieldValueEqualTo(['meta', 'attendees', userId(), 'status'], 'attended')
                || isRemovingField(['meta', 'attendees', userId()])
              )
              && isOnlyChangingAttendeeStatus()
            )
        )
        && notInMaintenance();
      allow delete: if userHasValidOrg()
        && ( existingData().ownerOrgId == userOrgId() && isOrgMember(userOrgId()) ) // Or Org of current user is the event owner and current user is isOrgMember
        && notInMaintenance();
		}

    /// FUNCTIONS ///

    function isOnlyChangingAttendeeStatus() {
      return isNotUpdatingId('id', existingData().id)
        && isNotUpdatingField(['allDay'])
        && isNotUpdatingField(['end'])
        && isNotUpdatingField(['accessibility'])
        && isNotUpdatingField(['ownerOrgId'])
        && isNotUpdatingField(['start'])
        // && isNotUpdatingField(['title'])
        // && isNotUpdatingField(['type'])
        // && isNotUpdatingField(['meta', 'organizerUid'])
        // && isNotUpdatingField(['meta', 'titleId'])
        // && isNotUpdatingField(['meta', 'controls'])
        // && isNotUpdatingField(['meta', 'files']);
    }

    ////////////////////////////////
    // CAMPAIGN RULES             //
    ////////////////////////////////

    // note: campaign is using the movieId as id
    match /campaigns/{movieId} {
      allow read: if isSignedInWithPassword() && notInMaintenance();
      allow write: if isOrgMember(incomingData().orgId)
                  && orgCan('canUpdate', incomingData().orgId, movieId)
                  && notInMaintenance();
    }

    ///////////////////////////
    // CMS RULES             //
    ///////////////////////////

    match /cms/{app} {
      allow read: if true;
      allow write: if isBlockframesAdmin(userId()) && notInMaintenance();

      match /{page}/{template} {
        allow read: if true;
        allow write: if isBlockframesAdmin(userId()) && notInMaintenance();
      }
    }

    ///////////////////////////
    // CONSENTS RULES        //
    ///////////////////////////

    match /consents/{consentId} {
			allow read, write: if false;
    }

    ////////////////////////////////
    // ANALYTICS RULES            //
    ////////////////////////////////

    match /analytics/{docId} {
      allow read: if isSignedIn()
        && notInMaintenance()
        && (resource == null || isMyAnalytics() || isAllowedToReadTitleOrOrgAnalytics());
      allow create, update: if isSignedIn()
        && notInMaintenance()
        && isRequestFieldValueEqualTo(['id'], docId)
        && isRequestFieldValueEqualToOrNotSetted(['meta', 'orgId'], userOrgId())
        && isRequestFieldValueEqualTo(['meta', 'uid'], userId());
    }

    function isAllowedToReadTitleOrOrgAnalytics() {
      let data = existingData();
      return (data.type == 'title' && (userOrgId() in data.meta.ownerOrgIds )) 
        || (data.type == 'organization' && (userOrgId() == data.meta.organizationId ));
    }

    function isMyAnalytics() {
      return existingData()._meta.createdBy == userId();
    }

    ////////////////////////////////
    // WATERFALL & BLOCKS RULES   //
    ////////////////////////////////

    match /waterfall/{waterfallId} {
      allow read: if userHasValidOrg()
        && notInMaintenance()
        && isOrgMember(userOrgId())
        && userOrgId() in existingData().orgIds;
      allow create: if userHasValidOrg()
        && isRequestFieldValueEqualToOrNotSetted(['id'], waterfallId)
        && notInMaintenance()
        && userOrgId() in getMovie(waterfallId).orgIds;
      allow update: if userHasValidOrg()
        && isNotUpdatingId('id', existingData().id)
        && notInMaintenance()
        && isOrgMember(userOrgId())
        && ( isWaterfallAdmin(waterfallId) || ( isWaterfallMember(waterfallId) && isOnlyUpdatingRightholders() ) );
      allow delete: if false;

      match /blocks/{blockId} {
        allow read: if userHasValidOrg()
          && notInMaintenance()
          && isOrgMember(userOrgId())
          && isWaterfallMember(waterfallId);
        allow create: if userHasValidOrg()
          && isRequestFieldValueEqualToOrNotSetted(['id'], blockId)
          && notInMaintenance()
          && isOrgMember(userOrgId())
          && isWaterfallAdmin(waterfallId);
        allow update: if userHasValidOrg()
          && isNotUpdatingId('id', existingData().id)
          && notInMaintenance()
          && isOrgMember(userOrgId())
          && isWaterfallAdmin(waterfallId);
        allow delete: if false;
      }

      match /rights/{rightId} {
        allow read: if userHasValidOrg()
          && notInMaintenance()
          && isOrgMember(userOrgId())
          && isWaterfallMember(waterfallId);
        allow create: if userHasValidOrg()
          && isRequestFieldValueEqualToOrNotSetted(['id'], rightId)
          && notInMaintenance()
          && isOrgMember(userOrgId())
          && isWaterfallAdmin(waterfallId);
        allow update: if userHasValidOrg()
          && isNotUpdatingId('id', existingData().id)
          && notInMaintenance()
          && isOrgMember(userOrgId())
          && isWaterfallAdmin(waterfallId);
        allow delete: if false;
      }

      match /statements/{statementId} {
        allow read: if userHasValidOrg()
          && notInMaintenance()
          && isOrgMember(userOrgId())
          && isWaterfallMember(waterfallId);
        allow create: if userHasValidOrg()
          && isRequestFieldValueEqualToOrNotSetted(['id'], statementId)
          && notInMaintenance()
          && isOrgMember(userOrgId())
          && ( isWaterfallAdmin(waterfallId) || canManage(waterfallId, incomingData().senderId) );
        allow update: if userHasValidOrg()
          && isNotUpdatingId('id', existingData().id)
          && isNotUpdatingId('senderId', existingData().senderId)
          && isNotUpdatingId('receiverId', existingData().receiverId)
          && notInMaintenance()
          && isOrgMember(userOrgId())
          && ( isWaterfallAdmin(waterfallId) || canManage(waterfallId, existingData().senderId) );
        allow delete: if userHasValidOrg()
          && notInMaintenance()
          && isOrgMember(userOrgId())
          && ( isWaterfallAdmin(waterfallId) || canManage(waterfallId, existingData().senderId) );
      }

      match /permissions/{orgId} {
        allow read: if userHasValidOrg()
          && notInMaintenance()
          && isOrgMember(userOrgId())
          && ( userOrgId() == orgId || isWaterfallAdmin(waterfallId));
        allow create: if userHasValidOrg()
          && isRequestFieldValueEqualToOrNotSetted(['id'], orgId)
          && notInMaintenance()
          && isOrgMember(userOrgId())
          && ( isCreatingWaterfall(waterfallId) || isWaterfallAdmin(waterfallId) );
        allow update: if userHasValidOrg()
          && isNotUpdatingId('id', existingData().id)
          && notInMaintenance()
          && isOrgMember(userOrgId())
          && isWaterfallAdmin(waterfallId);
        allow delete: if false;
      }

      match /documents/{documentId} {
        allow read: if userHasValidOrg()
          && notInMaintenance()
          && isOrgMember(userOrgId())
          && isWaterfallMember(waterfallId);
        allow create: if userHasValidOrg()
          && notInMaintenance()
          && isOrgMember(userOrgId())
          && isWaterfallMember(waterfallId);
        allow update: if userHasValidOrg()
          && isNotUpdatingId('id', existingData().id)
          && notInMaintenance()
          && isOrgMember(userOrgId())
          && canUpdateWaterfallDocument(waterfallId, documentId);
        allow delete: if userHasValidOrg()
          && notInMaintenance()
          && isOrgMember(userOrgId())
          && canUpdateWaterfallDocument(waterfallId, documentId);
      }
    }

    function isCreatingWaterfall(waterfallId) {
			return userOrgId() in getAfter(/databases/$(database)/documents/waterfall/$(waterfallId)).data.orgIds && 
        exists(/databases/$(database)/documents/waterfall/$(waterfallId)) == false;
    }

    function isWaterfallAdmin(waterfallId) {
      return getWaterfallPermissions(waterfallId).isAdmin == true;
    }

    function isWaterfallMember(waterfallId) {
      return userOrgId() in getWaterfall(waterfallId).orgIds;
    }

    function canManage(waterfallId, rightholderId) {
      return isWaterfallMember(waterfallId) && rightholderId in getWaterfallPermissions(waterfallId).rightholderIds;
    }

    function isOnlyUpdatingRightholders() {
      return isNotUpdatingField(['_meta', 'createdBy'])
        && isNotUpdatingField(['_meta', 'createdAt'])
        && isNotUpdatingField(['orgIds'])
        && isNotUpdatingField(['documents'])
        && isNotUpdatingField(['sources'])
        && isNotUpdatingField(['versions'])
    }

    function getWaterfallPermissions(waterfallId) {
      return get(/databases/$(database)/documents/waterfall/$(waterfallId)/permissions/$(userOrgId())).data;
    }

    function getWaterfall(waterfallId) {
      return get(/databases/$(database)/documents/waterfall/$(waterfallId)).data;
    }

    function canUpdateWaterfallDocument(waterfallId, documentId) {
      return getWaterfallDocument(waterfallId, documentId).ownerId == userOrgId() || isWaterfallAdmin(waterfallId);
    }

    function getWaterfallDocument(waterfallId, documentId) {
      return get(/databases/$(database)/documents/waterfall/$(waterfallId)/documents/$(documentId)).data;
    }

    /////////////////////////////////////////////////////////////////////////////////
    ///                                  FUNCTIONS                                ///
    ///                  set of functions to help building rules                  ///
    /////////////////////////////////////////////////////////////////////////////////

    // Check the requested data.
    function existingData() {
      return resource.data;
    }

    // Check the data after being updated.
    function incomingData() {
      return request.resource.data;
    }

    function currentUser() {
      return request.auth;
    }

    function currentSigninProvider() {
      return userId() != null ? currentUser().token.firebase.sign_in_provider : '';
    }

    function userId() {
      return currentUser().uid;
    }

  	// Check if the user is logged in the app with a real account.
    function isSignedInWithPassword() {
      return currentSigninProvider() == 'password';
    }

    // Check if the user is logged in the app with an anonymous account.
    function isSignedInAnonymously() {
      return currentSigninProvider() == 'anonymous';
    }

    // Check if user is signed in as anonymous or regular
    function isSignedIn() {
      return isSignedInWithPassword() || isSignedInAnonymously();
    }

  	function userOrgId() {
    	return get(/databases/$(database)/documents/users/$(userId())).data.orgId;
  	}

    function orgIdOf(userId) {
    	return get(/databases/$(database)/documents/users/$(userId)).data.orgId;
  	}

    // Check if the user belongs to an organization.
    function userHasValidOrg() {
    	return get(/databases/$(database)/documents/orgs/$(userOrgId())).data.status == "accepted";
    }

  	function isSuperAdmin(orgId) {
    	return getOrgPermissions(orgId).roles[userId()] == "superAdmin";
  	}

    function isOrgAdmin(orgId) {
    	// /!\ Carefull, parentheses needed for operator precedence to work
    	return (getOrgPermissions(orgId).roles[userId()] == "admin")
        || (isSuperAdmin(orgId));
    }

    function isOrgMember(orgId) {
    	return (getOrgPermissions(orgId).roles[userId()] == "member")
      	|| (isOrgAdmin(orgId));
    }

    function getDocumentPermissions(orgId, docId) {
    	return getAfter(/databases/$(database)/documents/permissions/$(orgId)/documentPermissions/$(docId)).data;
    }

    function canCreateNewPermissions(orgId, docId) {
    	return getAfter(/databases/$(database)/documents/permissions/$(orgId)/documentPermissions/$(docId)).data.canCreate == true;
    }

    function isCreatingOrganization(orgId) {
			return userId() in getAfter(/databases/$(database)/documents/orgs/$(orgId)).data.userIds
      	&& exists(/databases/$(database)/documents/orgs/$(orgId)) == false;
    }

    function getOrgPermissions(orgId) {
    	return get(/databases/$(database)/documents/permissions/$(orgId)).data;
    }

		// Parameter "action" can either be "canCreate", "canRead", "canUpdate" or "canDelete"
    function orgCan(action, orgId, docId) {
      let documentPermissions = getDocumentPermissions(orgId, docId);
      return (documentPermissions.ownerId == orgId)
        || (documentPermissions.isAdmin == true)
        || (documentPermissions[action] == true)
        || (isOrgAdmin(orgId) && orgId == docId);
    }


    // We check that the field is not sent or if field sent is equal to actual
    function isNotUpdatingField(fieldArray) {
      let size = fieldArray.size();
			return ( size == 3 &&  isNotUpdatingFieldDepth3(fieldArray))
        || ( size == 2 &&  isNotUpdatingFieldDepth2(fieldArray))
        || ( size == 1 &&  isNotUpdatingFieldDepth1(fieldArray));
    }

    function isNotUpdatingFieldDepth3(fieldArray) {
      let incoming = incomingData();
      let existing = existingData();
      let firstArg = fieldArray[0];
      let secondArg = fieldArray[1];
      let thirdArg = fieldArray[2];
      let firstLevel = incoming[firstArg];
      let secondLevel = firstLevel[secondArg];
			return ( !secondLevel.keys().hasAll([thirdArg]) || secondLevel[thirdArg] == existing[firstArg][secondArg][thirdArg] )
        || ( !firstLevel.keys().hasAll([secondArg]) || secondLevel == existing[firstArg][secondArg] )
        || ( !incoming.keys().hasAll([firstArg]) || firstLevel == existing[firstArg] );
    }

    function isNotUpdatingFieldDepth2(fieldArray) {
      let incoming = incomingData();
      let existing = existingData();
      let firstArg = fieldArray[0];
      let secondArg = fieldArray[1];
      let firstLevel = incoming[firstArg];
			return ( !firstLevel.keys().hasAll([secondArg]) || firstLevel[secondArg] == existing[firstArg][secondArg] )
        || ( !incoming.keys().hasAll([firstArg]) || firstLevel == existing[firstArg] );
    }

    function isNotUpdatingFieldDepth1(fieldArray) {
      let incoming = incomingData();
      let firstArg = fieldArray[0];
			return ( !incoming.keys().hasAll([firstArg]) || incoming[firstArg] == existingData()[firstArg] );
    }

    // Checks that the user is not trying to change document id
    function isNotUpdatingId(fieldName, value) {
      let incoming = incomingData();
			return ( !incoming.keys().hasAll([fieldName]) || incoming[fieldName] == value );
    }

    // Incoming field path must be setted with a value equal to "value"
    function isRequestFieldValueEqualTo(fieldArray, value) {
      let incoming = incomingData();
      return (incoming[fieldArray[0]][fieldArray[1]][fieldArray[2]][fieldArray[3]] == value)
        || (incoming[fieldArray[0]][fieldArray[1]][fieldArray[2]] == value)
        || (incoming[fieldArray[0]][fieldArray[1]] == value)
        || (incoming[fieldArray[0]] == value);
    }

    // Incoming field is not sent or equal to value
    function isRequestFieldValueEqualToOrNotSetted(fieldArray, value) {
    	return isRequestFieldValueNotSetted(fieldArray) || isRequestFieldValueEqualTo(fieldArray, value);
    }

    // The call doest not contain path fieldArray
    function isRequestFieldValueNotSetted(fieldArray) {
      let incoming = incomingData();
    	return (!incoming[fieldArray[0]][fieldArray[1]].keys().hasAll([fieldArray[2]]))
       || (!incoming[fieldArray[0]].keys().hasAll([fieldArray[1]]))
       || !incoming.keys().hasAll([fieldArray[0]]);
    }

    // The field is sent and not already existing
    function isCreatingField(fieldArray) {
      let incoming = incomingData();
      let existing = existingData();
      return ( incoming[fieldArray[0]][fieldArray[1]].keys().hasAll([fieldArray[2]]) && (resource == null || !existing[fieldArray[0]][fieldArray[1]].keys().hasAll([fieldArray[2]])) )
        || ( incoming[fieldArray[0]].keys().hasAll([fieldArray[1]]) && (resource == null || !existing[fieldArray[0]].keys().hasAll([fieldArray[1]])) )
        || ( incoming.keys().hasAll([fieldArray[0]]) && (resource == null || !existing.keys().hasAll([fieldArray[0]])) );
    }

    // Is updating only the specified fields ?
    function onlyChange(fields) {
      return incomingData().diff(existingData()).affectedKeys().hasOnly(fields);
    }

    // The field is removed
    function isRemovingField(fieldArray) {
      let incoming = incomingData();
      let existing = existingData();
      return ( existing[fieldArray[0]][fieldArray[1]].keys().hasAll([fieldArray[2]]) && !incoming[fieldArray[0]][fieldArray[1]].keys().hasAll([fieldArray[2]]) )
        || ( existing[fieldArray[0]].keys().hasAll([fieldArray[1]]) && !incoming[fieldArray[0]].keys().hasAll([fieldArray[1]]) )
        || ( existing.keys().hasAll([fieldArray[0]]) && !incoming.keys().hasAll([fieldArray[0]]) );
    }

    function notInMaintenance() {
      return get(/databases/$(database)/documents/_META/_MAINTENANCE).data['endedAt'] != null;
    }

  }
}
