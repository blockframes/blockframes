#
# ENV VARIABLES:
#   CACHE_VERSION:
#     change this version when you need to trigger a global cache refresh on the ci,
#     use case is: we move from node v9 to node v10 and we need to make sure the binaries are recompiled.
#     currently "v1" in circleci.
#   FIREBASE_SERVICE_ACCOUNT:
#     contains the service account credentials for the blockframes-ci project.
#     use case is: we want to use the firebase admin SDK and trigger deploys.
#     /!\ secret value.
#
version: 2.1
references:
  production_only: &production_only
    filters:
      branches:
        only:
          - production
  staging_only: &staging_only
    filters:
      branches:
        only:
          - staging
  release_only: &release_only
    filters:
      branches:
        only:
          - /release\/.*/
  deployment_branches: &deployment_branches
    - ci
    - develop
    - /release\/.*/
    - master
    - production
    - staging

commands:
  restore_fixtures_from_cache:
    steps:
      - restore_cache:
          keys:
            - fixture-cache-v1-{{ .Branch }}-{{ .Environment.CIRCLE_SHA1 }}
  save_fixtures_in_cache:
    steps:
      - save_cache:
          key: fixture-cache-v1-{{ .Branch }}-{{ .Environment.CIRCLE_SHA1 }} # ! This is how you isolate per workflow
          paths:
            - "tools/fixtures"
  start_e2e_emulators:
    steps:
      - restore_cache:
          keys:
            - emulator-cache-v1-
      - run:
          background: true
          command: npm start emulators
  fail_on_production:
    description: Exit if run against production - failsafe
    steps:
      - run:
          name: 'Exit if run against production - failsafe'
          command: | # ? [[ "blockframes" == "blockframes" ]] && exit 1 || exit 0
            if [ "$PROJECT_ID" == "blockframes" ]; then
              echo "PROJECT ID IS BLOCKFRAMES - DO NOT RUN ON PRODUCTION ENV!";
              exit 1;
            else
              exit 0
            fi
  select_environment:
    description: Configure tools to use a project ID
    steps:
      - run: npm run backend-ops use ${PROJECT_ID}
      - run: . ./.env && echo "export PROJECT_ID=\"$PROJECT_ID\"" >> $BASH_ENV
      - run: . ./.env && echo "export GOOGLE_APPLICATION_CREDENTIALS=\"$GOOGLE_APPLICATION_CREDENTIALS\"" >> $BASH_ENV
      - run: gcloud info
      - run: gsutil ls
  checkout_project:
    description: 'Checkout the project with caching'
    steps:
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
            - source-v1-{{ .Branch }}-
            - source-v1-
      - checkout
      - restore_cache:
          keys:
            - dependencies-{{ .Environment.CACHE_VERSION }}-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - dependencies-{{ .Environment.CACHE_VERSION }}
            - dependencies-
      - run: touch .env # dotenv will crash without this
      - run: cp env/env.blockframes-ci.ts env/env.ts # required for the typechecking & file rewrite to work
      - run: npm install --no-save
      - run: npx cypress install
      - run:
          name: 'Verify that this PR is not introducing weird package.json changes'
          command: |
            if git status | grep --quiet package.json; then
              echo "package.json changed after npm install, please verify your PR";
              git diff package.json
              exit 1;
            else
              exit 0
            fi
      - save_cache:
          paths:
            - node_modules
            - /home/circleci/.cache/Cypress
          key: dependencies-{{ .Environment.CACHE_VERSION }}-{{ checksum "package.json" }}
      - save_cache:
          key: source-v1-{{ .Branch }}-{{ .Revision }}
          paths:
            - ".git"
  prepare_environment:
    description: 'Checkout project and select env'
    steps:
        - checkout_project
        - run: echo $FIREBASE_CI_SERVICE_ACCOUNT > tools/credentials/ci-sak.json
        - run: echo $FIREBASE_PRODUCTION_SERVICE_ACCOUNT > tools/credentials/prod-sak.json
        - run: echo $FIREBASE_STAGING_SERVICE_ACCOUNT > tools/credentials/staging-sak.json
        - run: echo "${!SERVICE_ACCOUNT}" > ${GOOGLE_APPLICATION_CREDENTIALS}
        - select_environment
  replace_prod_files:
    description: 'Replace files for production'
    steps:
      - run: cp assets/robots.prod.txt apps/catalog/catalog/src/robots.txt
      - run: cp assets/robots.prod.txt apps/festival/festival/src/robots.txt
      - run: cp assets/robots.prod.txt apps/financiers/financiers/src/robots.txt
  deploy:
    description: 'Run full deployment'
    steps:
      - run:
          command: |
            npm start displayCredentials &&
            npm run deploy:storage &&
            npm run deploy:firestore &&
            npx nx run-many --target=deploy --all
  build_deploy_upgrade:
    description: 'Build & deploy Blockframes apps to Firebase & run upgrade if needed'
    steps:
      - deploy
      - run: npm start upgrade
      - slack/status
  build_deploy_prepare:
    description: 'Build & deploy project & prepare by loading live online test data'
    steps:
      - deploy
      - run:
          command: npm run backend-ops prepareForTesting
          no_output_timeout: 30m
      - slack/status
  build_deploy_prepare_shrunkdb:
    description: 'Build & deploy project & prepare by loading live online shurnk test data'
    steps:
      - deploy
      - run:
          command: npm run backend-ops prepareForTesting gs://ci-backups-blockframes/LATEST-ANON-SHRINKED-DB
          no_output_timeout: 30m
      - slack/status
  test_e2e_all:
    description: 'Run all e2e tests sequentially against non-emulated services (online)'
    steps:
        - run: npx cypress install
        - run:
            command: |
              npx nx run catalog-e2e:e2e:ci --headless && catalog_ret_code=$? || catalog_ret_code=$?

              npx nx run festival-e2e:e2e:ci --headless && festival_ret_code=$? || festival_ret_code=$?

              npx nx run financiers-e2e:e2e:ci --headless && financiers_ret_code=$? || financiers_ret_code=$?

              npx nx run crm-e2e:e2e:ci --headless && crm_ret_code=$? || crm_ret_code=$?

              if [ $catalog_ret_code -eq 0 ] && [ $festival_ret_code -eq 0 ] && [ $financiers_ret_code -eq 0 ] && [ $crm_ret_code -eq 0 ]; then
                exit 0;
              else
                exit 1;
              fi
            no_output_timeout: 20m
        - store_artifacts:
            name: Uploading screenshots
            path: ~/repo/dist/cypress/apps
orbs:
  cypress: cypress-io/cypress@1
  do-exclusively: miyajan/do-exclusively@0.1.0
  slack: circleci/slack@3.4.0
executors:
  blockframes-ci:
    docker:
      - image: blockframes/ci:latest
        environment:
          NODE_OPTIONS="--max-old-space-size=8192"
    working_directory: ~/repo
    resource_class: large
jobs:
  unit-test-staging:
    executor: blockframes-ci
    environment:
        NG_CONFIG: staging
        PROJECT_ID: blockframes-staging
    steps:
      - prepare_environment
      - restore_fixtures_from_cache
      - run:
          command: npm run test
          no_output_timeout: 15m
      - slack/notify:
          message: 'Unit tests complete on STAGING << pipeline.git.branch >>'
  unit-tests-ci:
    executor: blockframes-ci
    steps:
      - prepare_environment
      - restore_fixtures_from_cache
      - run:
          command: npm run test
          no_output_timeout: 15m
      - slack/notify:
          message: 'Unit tests complete on CI << pipeline.git.branch >>'
  build-deploy-prepare-staging:
    executor: blockframes-ci
    environment:
        NG_CONFIG: staging
        PROJECT_ID: blockframes-staging
    steps:
      - prepare_environment
      - build_deploy_prepare
      - save_fixtures_in_cache
      - slack/notify:
          message: 'Build, Deploy & PFT complete for STAGING << pipeline.git.branch >>'
  build-deploy-prepare-shrunk-ci:
    executor: blockframes-ci
    environment:
      PROJECT_ID: blockframes-demo-1
      NG_CONFIG: ''
    steps:
      - prepare_environment
      - build_deploy_prepare_shrunkdb
      - save_fixtures_in_cache
      - slack/notify:
          message: 'Build, Deploy & PFT complete for CI << pipeline.git.branch >>'
  build-deploy-prepare-ci:
    executor: blockframes-ci
    steps:
      - prepare_environment
      - build_deploy_prepare
      - save_fixtures_in_cache
      - slack/notify:
          message: 'Build, Deploy & PFT complete for CI << pipeline.git.branch >>'
  build-deploy-prepare-branch-against-selected-env:
    executor: blockframes-ci
    environment:
      NG_CONFIG: ''
    steps:
      - prepare_environment
      - run: echo "export PROJECT_ID=\"$(cut -d'/' -f2\<<<$CIRCLE_BRANCH)\"" >> $BASH_ENV
      - fail_on_production
      - select_environment
      - build_deploy_prepare
      - slack/notify:
          message: 'PFT complete for << pipeline.git.branch >>'
  build-deploy-upgrade-branch-against-selected-env:
    executor: blockframes-ci
    environment:
      NG_CONFIG: ''
    steps:
      - prepare_environment
      - run: echo "export PROJECT_ID=\"$(cut -d'/' -f2\<<<$CIRCLE_BRANCH)\"" >> $BASH_ENV
      - fail_on_production
      - select_environment
      - build_deploy_upgrade
      - slack/notify:
          message: 'UPGRADE complete for << pipeline.git.branch >>'
  prepare-for-testing-branch-against-selected-env:
    executor: blockframes-ci
    environment:
      NG_CONFIG: ''
    steps:
      - prepare_environment
      - run: echo "export PROJECT_ID=\"$(cut -d'/' -f2\<<<$CIRCLE_BRANCH)\"" >> $BASH_ENV
      - fail_on_production
      - select_environment
      - run:
          command: npm run backend-ops prepareForTesting
          no_output_timeout: 30m
      - slack/status
      - slack/notify:
          message: 'Deploy and PFT complete for << pipeline.git.branch >>'
  build-and-lint-full-release:
    executor: blockframes-ci
    steps:
      - checkout_project
      - run: npm run build:all
      - run: npm run lint
  lint-commits:
    executor: blockframes-ci
    steps:
      - prepare_environment
      - run: npm run affected:lint
  unit-test-commits:
    executor: blockframes-ci
    steps:
      - prepare_environment
      - run:
          command: npm run affected:test
          no_output_timeout: 15m
  test-e2e-ci:
    executor: blockframes-ci
    steps:
      - slack/notify:
          message: '🚲 Deploying & testing e2e (https://blockframes-ci.web.app/)'
      - prepare_environment
      - restore_fixtures_from_cache
      - test_e2e_all
      - run:
          name: send stability data
          command: ./.circleci/submit-stability.sh dist/test-reports
          when: always
          require: test_e2e_all
      - slack/status
  test-e2e-demo-1:
    executor: blockframes-ci
    environment:
      PROJECT_ID: blockframes-demo-1
      NG_CONFIG: ''
    steps:
      - slack/notify:
          message: '🛵 🤠 Deploying & testing e2e against demo-1 (shrunk db)'
      - prepare_environment
      - restore_fixtures_from_cache
      - test_e2e_all
      - slack/status
  test-e2e-staging:
    executor: blockframes-ci
    environment:
        NG_CONFIG: staging
        PROJECT_ID: blockframes-staging
    steps:
      - slack/notify:
          message: '🛵 🤠 Deploying release to staging.. (https://staging.blockframes.io/)'
      - prepare_environment
      - restore_fixtures_from_cache
      - test_e2e_all
      - slack/status
  deploy-to-prod:
    executor: blockframes-ci
    environment:
        PROJECT_ID: blockframes
        NG_CONFIG: production
    steps:
      - slack/notify:
          message: '🚚 Deploying to production...'
      - prepare_environment
      - replace_prod_files
      - build_deploy_upgrade
  deploy-to-staging:
    executor: blockframes-ci
    environment:
        PROJECT_ID: blockframes-staging
        NG_CONFIG: staging
    steps:
      - slack/notify:
          message: '🛵 Deploying to staging.. (https://staging.blockframes.io/)'
      - prepare_environment
      - build_deploy_upgrade
  push-anon-db-to-ci:
    executor: blockframes-ci
    steps:
      - prepare_environment
      - run: npm start anonProdDb
  push-shrink-db-to-ci:
    executor: blockframes-ci
    steps:
      - prepare_environment
      - run: npm start shrinkDb
  copy-storage-from-prod:
    executor: blockframes-ci
    steps:
      - prepare_environment
      - run: gsutil -m cp -r "gs://blockframes.appspot.com/*" "gs://blockframes-ci-storage-backup/storage-backup-$(date +%d-%m-%Y)/"
  backup-prod-db:
    executor: blockframes-ci
    environment:
        PROJECT_ID: blockframes
    steps:
      - prepare_environment
      - run: gcloud firestore export "gs://blockframes-backups/firestore-backup-$(date +%d-%m-%Y)/"
  crm-e2e:
    executor: blockframes-ci
    steps:
      - prepare_environment
      - run: npx nx build backend-functions --configuration=e2e
      - start_e2e_emulators
      - run: npm start upgradeEmulators
      - run: npx nx affected:e2e --configuration=emulator --exclude=festival-e2e,catalog-e2e,financiers-e2e
      - store_artifacts:
          path: dist/cypress/apps
  festival-e2e:
    executor: blockframes-ci
    steps:
      - prepare_environment
      - run: npx nx build backend-functions --configuration=e2e
      - start_e2e_emulators
      - run: npm start upgradeEmulators
      - run: npx nx affected:e2e --configuration=emulator --exclude=catalog-e2e,crm-e2e,financiers-e2e
      - store_artifacts:
          path: dist/cypress/apps
  financiers-e2e:
    executor: blockframes-ci
    steps:
      - prepare_environment
      - run: npx nx build backend-functions --configuration=e2e
      - start_e2e_emulators
      - run: npm start upgradeEmulators
      - run: npx nx affected:e2e --configuration=emulator --exclude=festival-e2e,crm-e2e,catalog-e2e
      - store_artifacts:
          path: dist/cypress/apps
  catalog-e2e:
    executor: blockframes-ci
    steps:
      - prepare_environment
      - run: npx nx build backend-functions --configuration=e2e
      - start_e2e_emulators
      - run: npm start upgradeEmulators
      - run: npx nx affected:e2e --configuration=emulator --exclude=festival-e2e,crm-e2e,financiers-e2e
      - store_artifacts:
          path: dist/cypress/apps
  prepare-emulators:
    executor: blockframes-ci
    steps:
      - prepare_environment
      - run:
          command: npm start prepareEmulators gs://ci-backups-blockframes/LATEST-ANON-SHRINKED-DB
          no_output_timeout: 30m
      # ? - run: npx nx build backend-functions --configuration=e2e
      - save_cache:
          key: emulator-cache-v1-{{ epoch }}
          paths:
            - ".firebase/emulator"
            # ? - "dist/apps/backend-functions"
            # ? - "/home/circleci/.cache/firebase/emulators"
            - "~/.cache/firebase/emulators"
            - "tools/fixtures"
workflows:
  run-anon-db-and-store-golden-data:
    jobs:
      - copy-storage-from-prod:
          filters:
            branches:
              only:
                - anon-db
      - push-anon-db-to-ci:
          requires:
            - copy-storage-from-prod
          filters:
            branches:
              only:
                - anon-db
      - push-shrink-db-to-ci:
          requires:
            - push-anon-db-to-ci
          filters:
            branches:
              only:
                - anon-db
      - prepare-emulators:
          requires:
            - push-shrink-db-to-ci
          filters:
            branches:
              only:
                - anon-db
  build-deploy-prepare-branch-against-selected-env:
    jobs:
      - build-deploy-prepare-branch-against-selected-env:
          filters:
            branches:
              only:
                - /deploy\/.*/
  build-deploy-upgrade-branch-against-selected-env:
    jobs:
      - build-deploy-upgrade-branch-against-selected-env:
          filters:
            branches:
              only:
                - /upgrade\/.*/
  prepare-for-testing-branch-against-selected-env:
    jobs:
      - prepare-for-testing-branch-against-selected-env:
          filters:
            branches:
              only:
                - /pft\/.*/
  nightly-backup:
    triggers:
      - schedule:
          cron: '0 0 * * *'
          filters:
            branches:
              only:
                - develop
    jobs:
      - backup-prod-db
  fetch-test-data-weekly:
    triggers:
      - schedule:
          cron: '0 0 * * 0'
          filters:
            branches:
              only:
                - develop
    jobs:
      - copy-storage-from-prod
      - push-anon-db-to-ci:
          requires:
            - copy-storage-from-prod
      - push-shrink-db-to-ci:
          requires:
            - push-anon-db-to-ci
      - prepare-emulators:
          requires:
            - push-shrink-db-to-ci
  deploy-to-prod-or-staging:
    jobs:
      - deploy-to-prod:
          <<: *production_only
      - deploy-to-staging:
          <<: *staging_only
  build-and-lint-full-release:
    jobs:
      - build-and-lint-full-release: # build and lint EVERYTHING release related
          filters:
            branches:
              only: *deployment_branches
  build-and-test: # lint and unit test commits that aren't release related
    jobs:
      - unit-test-commits:
          filters:
            branches:
              ignore: *deployment_branches
      - lint-commits:
          filters:
            branches:
              ignore: *deployment_branches
  run-all-tests-on-release-branches-against-staging:
    jobs:
      - build-deploy-prepare-staging:
          <<: *release_only
      - unit-test-staging:
          requires:
            - build-deploy-prepare-staging
          <<: *release_only
      - test-e2e-staging:
          requires:
            - build-deploy-prepare-staging
          <<: *release_only
  # nightly-tests:
  #   triggers:
  #     - schedule:
  #         cron: '0 0 * * *'
  #         filters:
  #           branches:
  #             only:
  #               - develop
  #   jobs:
  #     - build-deploy-prepare-ci
  #     - test-e2e-ci:
  #         requires:
  #           - build-deploy-prepare-ci
  #     - unit-tests-ci:
  #         requires:
  #           - build-deploy-prepare-ci
  run-sequential-online-e2e-tests-against-CI-branch-and-project:
    jobs:
      - build-deploy-prepare-ci:
          filters:
            branches:
              only:
                - ci
      - test-e2e-ci:
          requires:
            - build-deploy-prepare-ci
          filters:
            branches:
              only:
                - ci
      - unit-tests-ci:
          requires:
            - build-deploy-prepare-ci
          filters:
            branches:
              only:
                - ci
  run-sequential-online-e2e-tests-against-CI-branch-and-shrunk-project:
    jobs:
      - build-deploy-prepare-shrunk-ci:
          filters:
            branches:
              only:
                - ci
      - test-e2e-demo-1:
          requires:
            - build-deploy-prepare-shrunk-ci
          filters:
            branches:
              only:
                - ci
      # - unit-tests-ci:
      #     requires:
      #       - build-deploy-prepare-shrunk-ci
      #     filters:
      #       branches:
      #         only:
      #           - ci
  e2e-tests:
    jobs:
      - catalog-e2e:
          filters:
            branches:
              ignore: *deployment_branches
      - festival-e2e:
          filters:
            branches:
              ignore: *deployment_branches
      - crm-e2e:
          filters:
            branches:
              ignore: *deployment_branches
      - financiers-e2e:
          filters:
            branches:
              ignore: *deployment_branches
