#
# ENV VARIABLES:
#   CACHE_VERSION:
#     change this version when you need to trigger a global cache refresh on the ci,
#     use case is: we move from node v9 to node v10 and we need to make sure the binaries are recompiled.
#     currently "v1" in circleci.
#   FIREBASE_SERVICE_ACCOUNT:
#     contains the service account credentials for the blockframes-ci project.
#     use case is: we want to use the firebase admin SDK and trigger deploys.
#     /!\ secret value.
#
version: 2.1
references:
  start_firestore_emulator: &start_firestore_emulator
    run:
      name: start firestore emulator in background
      command: npm run firebase:emulator
      background: true
  production_only: &production_only
    filters:
      branches:
        only:
          - production
  staging_only: &staging_only
    filters:
      branches:
        only:
          - staging
  release_only: &release_only
    filters:
      branches:
        only:
          - /release\/.*/

commands:
  checkout_project:
    description: 'Checkout the project with caching'
    steps:
      - checkout
      - restore_cache:
          keys:
            - dependencies-{{ .Environment.CACHE_VERSION }}-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - dependencies-{{ .Environment.CACHE_VERSION }}
      - run: rm -rf node_modules/ganache-core/node_modules/web3-providers-ws/node_modules/websocket/.git
      - run: npm install
      - save_cache:
          paths:
            - node_modules
          key: dependencies-{{ .Environment.CACHE_VERSION }}-{{ checksum "package.json" }}
      - run: cp env/env.ci.ts env/env.ts # required for the typechecking & file rewrite to work
      - run:
          name: 'Verify that this PR is not introducing weird package.json changes'
          command: |
            if git status | grep --quiet package.json; then
              echo "package.json changed after npm install, please verify your PR";
              git diff package.json
              exit 1;
            else
              exit 0
            fi
orbs:
  do-exclusively: miyajan/do-exclusively@0.1.0
  slack: circleci/slack@3.4.0
executors:
  blockframes-ci:
    docker:
      - image: blockframes/ci:latest
    working_directory: ~/repo
    resource_class: large
jobs:
  build-and-deploy-storybook:
    executor: blockframes-ci
    environment:
      - ENV: ci
      - NODE_OPTIONS: '--max_old_space_size=7168'
      - GOOGLE_APPLICATION_CREDENTIALS: creds.json
    steps:
      - checkout_project
      - run: echo "${FIREBASE_CI_SERVICE_ACCOUNT}" > creds.json
      - run: npx nx run movie:build-storybook
      - run:
          command: |
            npx firebase use ci &&
            npx firebase deploy --only hosting:storybook
  build-and-test-all:
    executor: blockframes-ci
    environment:
      - ENV: ci
      - NODE_OPTIONS: '--max_old_space_size=7168'
      - GOOGLE_APPLICATION_CREDENTIALS: creds.json
    steps:
      - checkout_project
      - run: echo "${FIREBASE_CI_SERVICE_ACCOUNT}" > creds.json
      - *start_firestore_emulator
      - run: npm run build:all
      - run: npm run test
      - run: npm run lint
      - run:
          name: Check size of apps being build
          command: npm run bundlesize
      - run:
          name: Post sizes of apps to zapier
          command: |
            if [ "${CIRCLE_BRANCH}" = "production" ] || [ "${CIRCLE_BRANCH}" = "master" ]; then
              curl -X POST "${ZAPPIER_WEBHOOK}" --header "Build-number:${CIRCLE_BUILD_NUM}" --header "Branch:${CIRCLE_BRANCH}" --header  "Date:`date "+%D"`" --header  Catalog-size:`cat ./dist/apps/catalog/main**.js  | wc -c` --header  Festival-size:`cat ./dist/apps/festival/main**.js  | wc -c` --header  Functions-size:`cat ./dist/apps/backend-functions/main**.js | wc -c`;
            fi
  build-and-test-prs:
    executor: blockframes-ci
    environment:
      - ENV: ci
      - NODE_OPTIONS: '--max_old_space_size=7168'
      - GOOGLE_APPLICATION_CREDENTIALS: creds.json
    steps:
      - checkout_project
      - run: echo "${FIREBASE_CI_SERVICE_ACCOUNT}" > creds.json
      - *start_firestore_emulator
      - run:
          # npm run affected:build tries to build the libs which are broken,
          # the following command only build affected apps.
          name: build affected apps
          command: |
            AFFECTED=`npx nx affected:apps --plain --base=origin/develop`;
            echo "Building: ${AFFECTED}"
            for app in ${AFFECTED}; do
              echo "building ${app}";
              npm run build:${app};
            done;
      - run: npm run affected:lint --base=origin/develop
      - run: npm run test
      - run:
          name: Check size of apps being build
          command: |
            # Generate default json for bundlesize
            # This is a quick hack to get bundlesize AND affected build working.
            # Maintain this script to keep checking new apps.
            mkdir -p dist/apps/catalog \
                     dist/apps/festival \
                     dist/apps/backend-functions
            touch ./dist/apps/catalog/main.dummy.js \
                  ./dist/apps/festival/main.dummy.js \
                  ./dist/apps/backend-functions/main.dummy.js
            npm run bundlesize
      - run:
          name: Post sizes of apps to zapier
          command: |
            if [ "${CIRCLE_BRANCH}" = "production" ] || [ "${CIRCLE_BRANCH}" = "master" ]; then
              npm run build:all;
              curl -X POST "${ZAPPIER_WEBHOOK}" --header "Build-number:${CIRCLE_BUILD_NUM}" --header "Branch:${CIRCLE_BRANCH}" --header  "Date:`date "+%D"`" --header  Catalog-size:`cat ./dist/apps/catalog/main**.js | wc -c` --header  Festival-size:`cat ./dist/apps/festival/main**.js | wc -c` --header  Functions-size:`cat ./dist/apps/backend-functions/main**.js | wc -c`;
            fi
  test-e2e:
    executor: blockframes-ci
    environment:
      - ENV: ci
      - NODE_OPTIONS: '--max_old_space_size=7168'
      - GOOGLE_APPLICATION_CREDENTIALS: creds.json
    steps:
      - checkout_project
      - run: echo "export ADMIN_PASSWORD=\"${CI_ADMIN_PASSWORD}\"" >> $BASH_ENV
      - run: echo "${FIREBASE_CI_SERVICE_ACCOUNT}" > creds.json
      - run: npx cypress install
      - run: npm run build:all
      - slack/notify:
          message: 'ðŸš² Deploying & testing e2e (https://blockframes-ci.web.app/)'
      - do-exclusively/do-exclusively:
          token: $CIRCLE_TOKEN
          command: ./.circleci/deploy-and-test-e2e.sh
      - run:
          name: send stability data
          command: ./.circleci/submit-stability.sh dist/test-reports
          when: always
      - store_artifacts:
          name: Uploading screenshots
          path: ~/repo/dist/cypress/apps
      - slack/status
  test-e2e-release:
    executor: blockframes-ci
    environment:
      - ENV: staging
      - NODE_OPTIONS: '--max_old_space_size=7168'
      - GOOGLE_APPLICATION_CREDENTIALS: creds.json
    steps:
      - checkout_project
      - run: echo "${FIREBASE_STAGING_SERVICE_ACCOUNT}" > creds.json
      - run: cp env/env.staging.ts env/env.ts # required for the typechecking & file rewrite to work
      - run: npx cypress install
      - run: npm run build:all
      - slack/notify:
          message: 'ðŸ›µ ðŸ¤  Deploying release to staging.. (https://staging.blockframes.io/)'
      - run: |
          npx firebase use staging &&
          cp firestore.rules firestore.rules.regular &&
          cp firestore.maintenance.rules firestore.rules &&
          npx firebase deploy --only hosting:catalog,hosting:festival,storage,firestore &&
          npx firebase deploy --only functions --force
      - run:
          name: prepare staging for testing
          command: node dist/apps/backend-ops/main.js prepareForTesting
          when: always
      - run:
          command: |
            cp firestore.rules.regular firestore.rules &&
            npx firebase use staging &&
            npx firebase deploy --only firestore:rules
          when: always
      - run:
          name: catalog e2e tests
          command: npm run e2e:catalog
          when: always
      - run:
          name: festival e2e tests
          command: npm run e2e:festival
          when: always
      - store_artifacts:
          name: Uploading screenshots
          path: ~/repo/dist/cypress/apps
      - slack/status
  deploy-to-prod:
    executor: blockframes-ci
    environment:
      - ENV: production
      - NODE_OPTIONS: '--max_old_space_size=7168'
      - GOOGLE_APPLICATION_CREDENTIALS: creds.json
    steps:
      - checkout_project
      - run: echo "${FIREBASE_PRODUCTION_SERVICE_ACCOUNT}" > creds.json
      - run: cp env/env.prod.ts env/env.ts # required for the typechecking & file rewrite to work
      - run: npm run build:all
      - slack/notify:
          message: 'ðŸšš Deploying to production...'
      - run:
          command: |
            npx firebase use prod &&
            cp firestore.rules firestore.rules.regular &&
            cp firestore.maintenance.rules firestore.rules &&
            npx firebase deploy --only hosting:catalog,hosting:festival,storage,firestore &&
            npx firebase deploy --only functions --force
      - run: node dist/apps/backend-ops/main.js upgrade
      - run:
          command: |
            sleep 180 && # wait 3 minutes for google to acknowledge the new functions.
            cp firestore.rules.regular firestore.rules &&
            npx firebase use prod &&
            npx firebase deploy --only firestore:rules
          when: always
      - slack/status
  deploy-to-staging:
    executor: blockframes-ci
    environment:
      - ENV: staging
      - NODE_OPTIONS: '--max_old_space_size=7168'
      - GOOGLE_APPLICATION_CREDENTIALS: creds.json
    steps:
      - checkout_project
      - run: echo "${FIREBASE_STAGING_SERVICE_ACCOUNT}" > creds.json
      - run: cp env/env.staging.ts env/env.ts # required for the typechecking & file rewrite to work
      - run: npm run build:all
      - slack/notify:
          message: 'ðŸ›µ Deploying to staging.. (https://staging.blockframes.io/)'
      - run:
          command: |
            npx firebase use staging &&
            cp firestore.rules firestore.rules.regular &&
            cp firestore.maintenance.rules firestore.rules &&
            npx firebase deploy --only hosting:catalog,hosting:festival,storage,firestore &&
            npx firebase deploy --only functions --force
      - run: node dist/apps/backend-ops/main.js upgrade
      - run:
          command: |
            sleep 180 && # wait 3 minutes for google to acknowledge the new functions.
            cp firestore.rules.regular firestore.rules &&
            npx firebase use staging &&
            npx firebase deploy --only firestore:rules
          when: always
      - slack/status
  deploy-to-demo1:
    executor: blockframes-ci
    environment:
      - ENV: staging
      - NODE_OPTIONS: '--max_old_space_size=7168'
      - GOOGLE_APPLICATION_CREDENTIALS: creds.json
    steps:
      - checkout_project
      - run: echo "${FIREBASE_STAGING_SERVICE_ACCOUNT}" > creds.json
      - run: cp env/demo/env.demo1.ts env/env.ts # required for the typechecking & file rewrite to work
      - run: cp env/demo/env.demo1.ts env/env.staging.ts # prevent rewrites
      - run: npm run build:all
      - slack/notify:
          message: 'Deploying to demo1...'
      - run:
          command: |
            npx firebase use demo1 &&
            cp firestore.rules firestore.rules.regular &&
            cp firestore.maintenance.rules firestore.rules &&
            npx firebase deploy --only hosting:catalog,hosting:festival,storage,firestore &&
            npx firebase deploy --only functions --force
      - run: node dist/apps/backend-ops/main.js upgrade
      - run:
          command: |
            cp firestore.rules.regular firestore.rules &&
            npx firebase use demo1 &&
            npx firebase deploy --only firestore:rules
          when: always
      - slack/status
workflows:
  version: 2.1
  build-and-test:
    jobs:
      # build only the PR
      - build-and-test-prs:
          filters:
            branches:
              ignore:
                # TODO: factor this array
                - ci
                - develop
                - /release\/.*/
                - master
                - production
                - staging
      # build EVERYTHING and trigger the rest of the deploy
      - build-and-test-all:
          filters:
            branches:
              only:
                - ci
                - develop
                - /release\/.*/
                - master
                - production
                - staging
      - test-e2e-release:
          <<: *release_only
          requires:
            - build-and-test-all
      - test-e2e:
          requires:
            - build-and-test-all
          filters:
            branches:
              only:
                - ci
      - build-and-deploy-storybook:
          filters:
            branches:
              only:
                - develop
      - deploy-to-demo1:
          filters:
            branches:
              only:
                - demo1
      - deploy-to-prod:
          <<: *production_only
      - deploy-to-staging:
          <<: *staging_only
  nightly-e2e:
    triggers:
      - schedule:
          cron: '0 0 * * *'
          filters:
            branches:
              only:
                - develop
    jobs:
      - build-and-test-all
      - test-e2e:
          requires:
            - build-and-test-all
