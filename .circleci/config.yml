#
# ENV VARIABLES:
#   CACHE_VERSION:
#     change this version when you need to trigger a global cache refresh on the ci,
#     use case is: we move from node v9 to node v10 and we need to make sure the binaries are recompiled.
#     currently "v1" in circleci.
#   FIREBASE_SERVICE_ACCOUNT:
#     contains the service account credentials for the blockframes-ci project.
#     use case is: we want to use the firebase admin SDK and trigger deploys.
#     /!\ secret value.
#
version: 2.1
references:
  start_firestore_emulator: &start_firestore_emulator
    run:
      name: start firestore emulator in background
      command: . ./.circleci/run-firebase-emulator.sh
      background: true
  production_only: &production_only
    filters:
      branches:
        only:
          - production
  staging_only: &staging_only
    filters:
      branches:
        only:
          - staging
  release_only: &release_only
    filters:
      branches:
        only:
          - /release\/.*/
  deployment_branches: &deployment_branches
    - ci
    - develop
    - /release\/.*/
    - master
    - production
    - staging

commands:
  checkout_project:
    description: 'Checkout the project with caching'
    steps:
      - checkout
      - restore_cache:
          keys:
            - dependencies-{{ .Environment.CACHE_VERSION }}-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - dependencies-{{ .Environment.CACHE_VERSION }}
      - run: rm -rf node_modules/ganache-core/node_modules/web3-providers-ws/node_modules/websocket/.git
      - run: touch .env # dotenv will crash without this
      - run: npm install
      - save_cache:
          paths:
            - node_modules
          key: dependencies-{{ .Environment.CACHE_VERSION }}-{{ checksum "package.json" }}
      - run: cp env/env.blockframes-ci.ts env/env.ts # required for the typechecking & file rewrite to work
      - run:
          name: 'Verify that this PR is not introducing weird package.json changes'
          command: |
            if git status | grep --quiet package.json; then
              echo "package.json changed after npm install, please verify your PR";
              git diff package.json
              exit 1;
            else
              exit 0
            fi
  prepare_gcloud:
    description: 'Ensure gcloud and gsutil are correctly configured & prepare service account key'
    steps:
        - run: echo "${!SERVICE_ACCOUNT}" > ${GOOGLE_APPLICATION_CREDENTIALS}
        - run: gcloud auth activate-service-account --key-file=${GOOGLE_APPLICATION_CREDENTIALS}
        - run: gcloud --quiet config set project ${PROJECT_ID}
        - run: gcloud info
        - run: gsutil ls
  prepare_environment:
    description: 'Set up CI environment'
    steps:
      - checkout_project
      - prepare_gcloud
      - run: cp $ENV_TS ./env/env.ts
  replace_prod_files:
    description: 'Replace files for production'
    steps:
      - run: cp assets/robots.prod.txt apps/catalog/catalog/src/robots.txt
      - run: cp assets/robots.prod.txt apps/festival/festival/src/robots.txt
      - run: cp assets/robots.prod.txt apps/financiers/financiers/src/robots.txt
  deploy:
    description: 'Run full deployment'
    steps:
      - run:
          command: |
            npm run backend-ops displayCredentials &&
            npm run deploy:storage &&
            npm run deploy:firestore &&
            npx nx run-many --target=deploy --projects=festival,catalog,crm,cms,financiers,backend-functions
  build_deploy_upgrade:
    description: 'Build & deploy Blockframes apps to Firebase & run upgrade if needed'
    steps:
      - deploy
      - run: npm run backend-ops upgrade
      - slack/status
  build_deploy_prepare:
    description: 'Build & deploy project & prepare by loading test data'
    steps:
      - deploy
      - run: npm run backend-ops prepareForTesting
      - slack/status
  test_e2e_all:
    description: 'Run all e2e tests'
    steps:
        - run: npx cypress install
        - run:
            name: catalog e2e tests
            command: npm run e2e:catalog
            when: always
        - run:
            name: festival e2e tests
            command: npm run e2e:festival
            when: always
        - store_artifacts:
            name: Uploading screenshots
            path: ~/repo/dist/cypress/apps
orbs:
  do-exclusively: miyajan/do-exclusively@0.1.0
  slack: circleci/slack@3.4.0
executors:
  blockframes-ci:
    docker:
      - image: blockframes/ci:latest
    working_directory: ~/repo
    resource_class: large
jobs:
  build-and-test-all:
    executor: blockframes-ci
    environment:
        ENV: ci
    steps:
      - prepare_environment
      - run: npm run build:all
      - run: npm run lint
      - run:
          name: Check size of apps being build
          command: npm run bundlesize
      - run:
          name: Post sizes of apps to zapier
          command: |
            if [ "${CIRCLE_BRANCH}" = "production" ] || [ "${CIRCLE_BRANCH}" = "master" ]; then
              curl -X POST "${ZAPPIER_WEBHOOK}" --header "Build-number:${CIRCLE_BUILD_NUM}" --header "Branch:${CIRCLE_BRANCH}" --header  "Date:`date "+%D"`" --header  Catalog-size:`cat ./dist/apps/catalog/main**.js  | wc -c` --header  Festival-size:`cat ./dist/apps/festival/main**.js  | wc -c` --header  Functions-size:`cat ./dist/apps/backend-functions/main**.js | wc -c`;
            fi
  build-and-test-prs:
    executor: blockframes-ci
    steps:
      - prepare_environment
      - run:
          # npm run affected:build tries to build the libs which are broken,
          # the following command only build affected apps.
          name: build affected apps
          command: |
            AFFECTED=`npx nx affected:apps --plain --base=origin/develop`;
            echo "Building: ${AFFECTED}"
            for app in ${AFFECTED}; do
              echo "building ${app}";
          # npm run build:${app};
            done;
      - run: npm run affected:lint --base=origin/develop
      - run:
          name: Run unit-tests on affected apps
          command: |
            # Run npm command to unit tests on affected apps
            firebase functions:config:get > .runtimeconfig.json
            firebase emulators:exec 'nx run user:test'
      - run:
          name: Check size of apps being build
          command: |
            # Generate default json for bundlesize
            # This is a quick hack to get bundlesize AND affected build working.
            # Maintain this script to keep checking new apps.
            mkdir -p dist/apps/catalog \
                     dist/apps/festival \
                     dist/apps/backend-functions
            touch ./dist/apps/catalog/main.dummy.js \
                  ./dist/apps/festival/main.dummy.js \
                  ./dist/apps/backend-functions/main.dummy.js
            npm run bundlesize
      - run:
          name: Post sizes of apps to zapier
          command: |
            if [ "${CIRCLE_BRANCH}" = "production" ] || [ "${CIRCLE_BRANCH}" = "master" ]; then
              npm run build:all;
              curl -X POST "${ZAPPIER_WEBHOOK}" --header "Build-number:${CIRCLE_BUILD_NUM}" --header "Branch:${CIRCLE_BRANCH}" --header  "Date:`date "+%D"`" --header  Catalog-size:`cat ./dist/apps/catalog/main**.js | wc -c` --header  Festival-size:`cat ./dist/apps/festival/main**.js | wc -c` --header  Functions-size:`cat ./dist/apps/backend-functions/main**.js | wc -c`;
            fi
  test-e2e: # TODO: This needs to be refactored - runs tests against CI project when there's a commit to CI & nightly tests
    executor: blockframes-ci
    steps:
      - slack/notify:
          message: 'ðŸš² Deploying & testing e2e (https://blockframes-ci.web.app/)'
      - prepare_environment
      - build_deploy_prepare
      - run: sleep 500 # TODO instead of wait, disable maintenance with command
      - test_e2e_all
      - run: npm run test
      - run:
          name: send stability data
          command: ./.circleci/submit-stability.sh dist/test-reports
          when: always
      - slack/status
  test-e2e-release: # * Will build and test each release commit against staging
    executor: blockframes-ci
    environment:
        NG_CONFIG: staging
        ENV_TS: env/env.blockframes-staging.ts
        SERVICE_ACCOUNT: FIREBASE_STAGING_SERVICE_ACCOUNT
        PROJECT_ID: blockframes-staging
    steps:
      - slack/notify:
          message: 'ðŸ›µ ðŸ¤  Deploying release to staging.. (https://staging.blockframes.io/)'
      - prepare_environment
      - build_deploy_prepare
      - run: sleep 500 # TODO instead of wait, disable maintenance with command
      - test_e2e_all
      - run: npm run test
      - slack/status
  deploy-to-prod:
    executor: blockframes-ci
    environment:
        PROJECT_ID: blockframes
        ENV_TS: 'env/env.blockframes.ts'
        NG_CONFIG: production
        SERVICE_ACCOUNT: FIREBASE_PRODUCTION_SERVICE_ACCOUNT
    steps:
      - slack/notify:
          message: 'ðŸšš Deploying to production...'
      - prepare_environment
      - replace_prod_files
      - build_deploy_upgrade
  deploy-to-staging:
    executor: blockframes-ci
    environment:
        PROJECT_ID: blockframes-staging
        NG_CONFIG: staging
        SERVICE_ACCOUNT: FIREBASE_STAGING_SERVICE_ACCOUNT
        ENV_TS: 'env/env.blockframes-staging.ts'
    steps:
      - slack/notify:
          message: 'ðŸ›µ Deploying to staging.. (https://staging.blockframes.io/)'
      - prepare_environment
      - build_deploy_upgrade
  deploy-to-demo1:
    executor: blockframes-ci
    environment:
       PROJECT_ID: blockframes-demo-1
       NG_CONFIG: demo1
       ENV_TS: './env/env.blockframes-demo-1.ts'
    steps:
      - slack/notify:
          message: 'Deploying to demo1...'
      - prepare_environment
      - build_deploy_prepare
  deploy-to-demo2:
    executor: blockframes-ci
    environment:
       PROJECT_ID: blockframes-demo-2
       NG_CONFIG: ''
       ENV_TS: './env/env.blockframes-demo-2.ts'
    steps:
      - slack/notify:
          message: 'Deploying to demo2...'
      - prepare_environment
      - build_deploy_prepare
  deploy-to-demo3:
    executor: blockframes-ci
    environment:
       PROJECT_ID: blockframes-demo-3
       NG_CONFIG: ''
       ENV_TS: './env/env.blockframes-demo-3.ts'
    steps:
      - slack/notify:
          message: 'Deploying to demo3...'
      - prepare_environment
      - build_deploy_prepare
  deploy-to-demo4:
    executor: blockframes-ci
    environment:
       PROJECT_ID: blockframes-demo-4
       NG_CONFIG: ''
       ENV_TS: './env/env.blockframes-demo-4.ts'
    steps:
      - slack/notify:
          message: 'Deploying to demo4...'
      - prepare_environment
      - build_deploy_prepare
  deploy-to-demo5:
    executor: blockframes-ci
    environment:
       PROJECT_ID: blockframes-demo-5
       NG_CONFIG: ''
       ENV_TS: './env/env.blockframes-demo-5.ts'
    steps:
      - slack/notify:
          message: 'Deploying to demo5...'
      - prepare_environment
      - build_deploy_prepare
  push-anon-db-to-ci:
    executor: blockframes-ci
    steps:
      - prepare_environment
      - run: npm run db:download-prod
      - run: npm run db:anonymize
      - run: npm run db:upload-anon-db-ci
      - run: gsutil -m -q rm -r "gs://ci-backups-blockframes/LATEST-ANON-DB/*"
      - run: npm run firestore:run-db-anon-process
  copy-storage-from-prod:
    executor: blockframes-ci
    steps:
      - prepare_gcloud
      - run: gsutil -m cp -r "gs://blockframes.appspot.com/*" "gs://blockframes-ci-storage-backup/storage-backup-$(date +%d-%m-%Y)/"
  backup-prod-db:
    executor: blockframes-ci
    environment:
        SERVICE_ACCOUNT: FIREBASE_PRODUCTION_SERVICE_ACCOUNT
        PROJECT_ID: blockframes
    steps:
      - prepare_gcloud
      - run: gcloud firestore export "gs://blockframes-backups/firestore-backup-$(date +%d-%m-%Y)/"
workflows:
  nightly-backup:
    triggers:
      - schedule:
          cron: '0 0 * * *'
          filters:
            branches:
              only:
                - develop
    jobs:
      - backup-prod-db
  fetch-test-data-weekly:
    triggers:
      - schedule:
          cron: '0 0 * * 0'
          filters:
            branches:
              only:
                - develop
    jobs:
      - push-anon-db-to-ci
      - copy-storage-from-prod
  deploy:
    jobs:
      - deploy-to-demo3:
          filters:
            branches:
              only:
                - demo3
      - deploy-to-demo2:
          filters:
            branches:
              only:
                - demo2
      - deploy-to-demo1:
          filters:
            branches:
              only:
                - demo1
      - deploy-to-demo4:
          filters:
            branches:
              only:
                - demo4
      - deploy-to-demo5:
          filters:
            branches:
              only:
                - demo5
      - deploy-to-prod:
          <<: *production_only
      - deploy-to-staging:
          <<: *staging_only
  nightly-tests:
    triggers:
      - schedule:
          cron: '0 0 * * *'
          filters:
            branches:
              only:
                - develop
    jobs:
      - build-and-test-all
      - test-e2e:
          requires:
            - build-and-test-all
  build-and-test:
    jobs:
      - build-and-test-prs: # build only PR related branches
          filters:
            branches:
              ignore: *deployment_branches
      - build-and-test-all: # build EVERYTHING and trigger test release on deployment branch
          filters:
            branches:
              only: *deployment_branches
      - test-e2e-release:
          <<: *release_only
          requires:
            - build-and-test-all
      - test-e2e:
          requires:
            - build-and-test-all
          filters:
            branches:
              only:
                - ci
