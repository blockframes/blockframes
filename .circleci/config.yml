#
# ENV VARIABLES:
#   CACHE_VERSION:
#     change this version when you need to trigger a global cache refresh on the ci,
#     use case is: we move from node v9 to node v10 and we need to make sure the binaries are recompiled.
#     currently "v1" in circleci.
#   FIREBASE_SERVICE_ACCOUNT:
#     contains the service account credentials for the blockframes-ci project.
#     use case is: we want to use the firebase admin SDK and trigger deploys.
#     /!\ secret value.
#
version: 2.1
production_only: &production_only
  filters:
    branches:
      only:
        - production
staging_only: &staging_only
  filters:
    branches:
      only:
        - staging
ci_only: &ci_only
  filters:
    branches:
      only:
        - clean-ops
orbs:
  do-exclusively: miyajan/do-exclusively@0.1.0
  slack: circleci/slack@3.4.0
executors:
  blockframes-ci:
    docker:
      - image: blockframes/ci:latest
    working_directory: ~/repo
jobs:
  build:
    executor: blockframes-ci
    environment:
      - ENV: "ci"
      - NODE_OPTIONS: "--max_old_space_size=4096"
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - dependencies-{{ .Environment.CACHE_VERSION }}-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - dependencies-{{ .Environment.CACHE_VERSION }}
      - run: rm -rf node_modules/ganache-core/node_modules/web3-providers-ws/node_modules/websocket/.git
      - run: npm install
      - run: ./node_modules/.bin/cypress install
      - save_cache:
          paths:
            - node_modules
            - ~/.cache/Cypress
          key: dependencies-{{ .Environment.CACHE_VERSION }}-{{ checksum "package.json" }}
      - run: cp env/env.ci.ts env/env.ts # required for the typechecking & file rewrite to work
      - run: npm run build:all
      - persist_to_workspace:
          root: ~/repo
          paths:
            - node_modules/
            - dist/
            - env/
      - persist_to_workspace:
          root: ~/.cache
          paths:
            - Cypress
  bundlesize:
    executor: blockframes-ci
    steps:
      - checkout
      - attach_workspace:
          at: ~/build
      - run: cp -R ~/build/* ./
      - run: npm run bundlesize
  zapier:
    executor: blockframes-ci
    steps:
      - checkout
      - attach_workspace:
          at: ~/build
      - run: cp -R ~/build/* ./
      - run:
          name: Post sizes of apps to zapier
          command: |
            curl -X POST "${ZAPPIER_WEBHOOK}" --header "Build-number:${CIRCLE_BUILD_NUM}" --header "Branch:${CIRCLE_BRANCH}" --header  "Date:`date "+%D"`" --header  Main-size:`cat ./dist/apps/main**.js | wc -c` --header  Delivery-size:`cat ./dist/apps/delivery/main**.js | wc -c` --header  Marketplace-size:`cat ./dist/apps/catalog-marketplace/main**.js | wc -c` --header  Dashboard-size:`cat ./dist/apps/catalog-dashboard/main**.js | wc -c` --header  Movie-financing-size:`cat ./dist/apps/movie-financing/main**.js | wc -c` --header  Functions-size:`cat ./dist/apps/backend-functions/main**.js | wc -c`
  lint:
    executor: blockframes-ci
    steps:
      - checkout
      - attach_workspace:
          at: ~/build
      - run: cp -R ~/build/* ./
      - run: npm run lint
  test:
    executor: blockframes-ci
    environment:
      - GOOGLE_APPLICATION_CREDENTIALS: creds.json
    steps:
      - checkout
      - attach_workspace:
          at: ~/build
      - run: cp -R ~/build/* ./
      - run: echo "${FIREBASE_SERVICE_ACCOUNT}" > creds.json
      - run: npm run test
  test-e2e:
    executor: blockframes-ci
    environment:
      - ENV: "ci"
      - GOOGLE_APPLICATION_CREDENTIALS: creds.json
    steps:
      - checkout
      - attach_workspace:
          at: ~/build
      - run: cp -R ~/build/* ./
      - run: echo "${FIREBASE_SERVICE_ACCOUNT}" > creds.json
      - run: mkdir -p ~/.cache/ && cp -R ~/build/Cypress ~/.cache
      - slack/notify:
          message: "ðŸš² Deploying & testing e2e"
      - run: |
          npm install --save-dev firebase-tools &&
          npx firebase use ci &&
          npx firebase deploy --force || true;
          npx ng build backend-ops --configuration=$ENV
      - run:
          name: prepare the ci for testing
          command: node dist/apps/backend-ops/main.js prepareForTesting
          when: always
      - run:
          name: main e2e tests
          command: npm e2e:main
          when: always
      - run:
          name: delivery e2e tests
          command: npm e2e:delivery
          when: always
      - run:
          name: catalog-marketplace e2e tests
          command: npm e2e:catalog-marketplace
          when: always
      - run:
          name: catalog-dashboard e2e tests
          command: npm e2e:catalog-dashboard
          when: always
      - run:
          name: movie-financing e2e tests
          command: npm e2e:movie-financing
          when: always
      - store_artifacts:
          name: Uploading screenshots
          path: ~/repo/dist/out-tsc/apps/
      - slack/status:
          webhook: "${SLACK_WEBHOOK}"
  deploy-to-prod:
    executor: blockframes-ci
    environment:
      - ENV: "production"
    steps:
      - checkout
      - restore_cache:
          keys:
            - dependencies-{{ .Environment.CACHE_VERSION }}-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - dependencies-{{ .Environment.CACHE_VERSION }}
      - run: rm -rf node_modules/ganache-core/node_modules/web3-providers-ws/node_modules/websocket/.git
      - run: npm install
      - run: cp env/env.prod.ts env/env.ts # required for the typechecking & file rewrite to work
      - run: npm run build:all
      - slack/notify:
          message: "ðŸšš Deploying to production..."
          webhook: "${SLACK_WEBHOOK}"
      - do-exclusively/do-exclusively:
          # Note: right now do-exclusively excludes cross-jobs (e2e & prod).
          token: $CIRCLE_TOKEN
          command: |
            npm install --save-dev firebase-tools &&
            npx firebase use prod &&
            ENV=production npx firebase deploy --except functions &&
            ENV=production npx firebase deploy --only functions --force
      - slack/status:
          webhook: "${SLACK_WEBHOOK}"
  deploy-to-staging:
    executor: blockframes-ci
    environment:
      - ENV: "staging"
      - NODE_OPTIONS: "--max_old_space_size=4096"
    steps:
      - checkout
      - restore_cache:
          keys:
            - dependencies-{{ .Environment.CACHE_VERSION }}-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - dependencies-{{ .Environment.CACHE_VERSION }}
      - run: rm -rf node_modules/ganache-core/node_modules/web3-providers-ws/node_modules/websocket/.git
      - run: npm install
      - run: cp env/env.staging.ts env/env.ts # required for the typechecking & file rewrite to work
      - run: npm run build:all
      - slack/notify:
          message: "ðŸ›µ Deploying to staging.."
          webhook: "${SLACK_WEBHOOK}"
      - do-exclusively/do-exclusively:
          # Note: right now do-exclusively excludes cross-jobs (e2e & prod).
          token: $CIRCLE_TOKEN
          command: |
            npm install --save-dev firebase-tools &&
            npx firebase use staging &&
            ENV=staging npx firebase deploy --except functions &&
            ENV=staging npx firebase deploy --only functions --force
      - slack/status:
          webhook: "${SLACK_WEBHOOK}"
workflows:
  version: 2.1
  build-test-deploy:
    jobs:
      - build
      - bundlesize:
          requires:
            - build
      - zapier:
          filters:
            branches:
              only:
                - master
                - production
          requires:
            - build
      - lint:
          requires:
            - build
      - test:
          requires:
            - build
      - test-e2e:
          <<: *ci_only
          requires:
            - build
      - deploy-to-prod:
          <<: *production_only
      - deploy-to-staging:
          <<: *staging_only
