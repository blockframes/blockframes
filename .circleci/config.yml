#
# ENV VARIABLES:
#   CACHE_VERSION:
#     change this version when you need to trigger a global cache refresh on the ci,
#     use case is: we move from node v9 to node v10 and we need to make sure the binaries are recompiled.
#     currently "v1" in circleci.
#   FIREBASE_SERVICE_ACCOUNT:
#     contains the service account credentials for the blockframes-ci project.
#     use case is: we want to use the firebase admin SDK and trigger deploys.
#     /!\ secret value.
#
version: 2.1
references:
  production_only: &production_only
    filters:
      branches:
        only:
          - production
  staging_only: &staging_only
    filters:
      branches:
        only:
          - staging
  ci_only: &ci_only
    filters:
      branches:
        only:
          - ci
commands:
  checkout_project:
    description: 'Checkout the project with caching'
    steps:
      - checkout
      - restore_cache:
          keys:
            - dependencies-{{ .Environment.CACHE_VERSION }}-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - dependencies-{{ .Environment.CACHE_VERSION }}
      - run: rm -rf node_modules/ganache-core/node_modules/web3-providers-ws/node_modules/websocket/.git
      - run: npm install
      - save_cache:
          paths:
            - node_modules
          key: dependencies-{{ .Environment.CACHE_VERSION }}-{{ checksum "package.json" }}
      - run: cp env/env.ci.ts env/env.ts # required for the typechecking & file rewrite to work
      - run:
          name: 'Verify that this PR is not introducing weird package.json changes'
          command: |
            if git status | grep --quiet package.json; then
              echo "package.json changed after npm install, please verify your PR";
              git diff package.json
              exit 1;
            else
              exit 0
            fi
orbs:
  do-exclusively: miyajan/do-exclusively@0.1.0
  slack: circleci/slack@3.4.0
executors:
  blockframes-ci:
    docker:
      - image: blockframes/ci:latest
    working_directory: ~/repo
    resource_class: medium+
jobs:
  build-and-test-all:
    executor: blockframes-ci
    environment:
      - ENV: ci
      - NODE_OPTIONS: '--max_old_space_size=4096'
      - GOOGLE_APPLICATION_CREDENTIALS: creds.json
    steps:
      - checkout_project
      - run: echo "${FIREBASE_CI_SERVICE_ACCOUNT}" > creds.json
      - run: npm run build:all
      - run: npm run test
      - run: npm run lint
      - run:
          name: Check size of apps being build
          command: npm run bundlesize
      - run:
          name: Post sizes of apps to zapier
          command: |
            if [ "${CIRCLE_BRANCH}" = "production" ] || [ "${CIRCLE_BRANCH}" = "master" ]; then
              curl -X POST "${ZAPPIER_WEBHOOK}" --header "Build-number:${CIRCLE_BUILD_NUM}" --header "Branch:${CIRCLE_BRANCH}" --header  "Date:`date "+%D"`" --header  Main-size:`cat ./dist/apps/main**.js | wc -c` --header  Delivery-size:`cat ./dist/apps/delivery/main**.js | wc -c` --header  Marketplace-size:`cat ./dist/apps/catalog/main**.js | wc -c` --header  Movie-financing-size:`cat ./dist/apps/movie-financing/main**.js | wc -c` --header  Functions-size:`cat ./dist/apps/backend-functions/main**.js | wc -c`;
            fi
  build-and-test-prs:
    executor: blockframes-ci
    environment:
      - ENV: ci
      - NODE_OPTIONS: '--max_old_space_size=4096'
      - GOOGLE_APPLICATION_CREDENTIALS: creds.json
    steps:
      - checkout_project
      - run: echo "${FIREBASE_CI_SERVICE_ACCOUNT}" > creds.json
      - run:
          # npm run affected:build tries to build the libs which are broken,
          # the following command only build affected apps.
          name: build affected apps
          command: |
            AFFECTED=`npx nx affected:apps --plain --base=origin/master`;
            echo "Building: ${AFFECTED}"
            for app in ${AFFECTED}; do
              echo "building ${app}";
              npm run build:${app};
            done;
      - run: npm run affected:lint --base=origin/master
      - run: npm run test
      - run:
          name: Check size of apps being build
          command: |
            # Generate default json for bundlesize
            # This is a quick hack to get bundlesize AND affected build working.
            # Maintain this script to keep checking new apps.
            mkdir -p dist/apps/delivery \
                     dist/apps/catalog \
                     dist/apps/backend-functions \
                     dist/apps/movie-financing
            touch ./dist/apps/main.dummy.js \
                  ./dist/apps/delivery/main.dummy.js \
                  ./dist/apps/catalog/main.dummy.js \
                  ./dist/apps/backend-functions/main.dummy.js \
                  ./dist/apps/movie-financing/main.dummy.js \
            npm run bundlesize
      - run:
          name: Post sizes of apps to zapier
          command: |
            if [ "${CIRCLE_BRANCH}" = "production" ] || [ "${CIRCLE_BRANCH}" = "master" ]; then
              npm run build:all;
              curl -X POST "${ZAPPIER_WEBHOOK}" --header "Build-number:${CIRCLE_BUILD_NUM}" --header "Branch:${CIRCLE_BRANCH}" --header  "Date:`date "+%D"`" --header  Main-size:`cat ./dist/apps/main**.js | wc -c` --header  Delivery-size:`cat ./dist/apps/delivery/main**.js | wc -c` --header  Marketplace-size:`cat ./dist/apps/catalog/main**.js | wc -c` --header  Movie-financing-size:`cat ./dist/apps/movie-financing/main**.js | wc -c` --header  Functions-size:`cat ./dist/apps/backend-functions/main**.js | wc -c`;
            fi
  test-e2e:
    executor: blockframes-ci
    environment:
      - ENV: ci
      - NODE_OPTIONS: '--max_old_space_size=4096'
      - GOOGLE_APPLICATION_CREDENTIALS: creds.json
    steps:
      - checkout_project
      - run: echo "${FIREBASE_CI_SERVICE_ACCOUNT}" > creds.json
      - run: npx cypress install
      - run: npm run build:all
      - slack/notify:
          message: 'ðŸš² Deploying & testing e2e (https://blockframes-ci.web.app/)'
      - run: |
          npm install --save-dev firebase-tools &&
          npx firebase use ci &&
          npx firebase deploy --force || true;
          npx ng build backend-ops --configuration=$ENV
      - run:
          name: prepare the ci for testing
          command: npm run build:backend-ops && node dist/apps/backend-ops/main.js prepareForTesting
          when: always
      - run:
          name: main e2e tests
          command: npm run e2e:main
          when: always
      - run:
          name: delivery e2e tests
          command: npm run e2e:delivery
          when: always
      - run:
          name: catalog e2e tests
          command: npm run e2e:catalog
          when: always
      - run:
          name: movie-financing e2e tests
          command: npm run e2e:movie-financing
          when: always
      - store_artifacts:
          name: Uploading screenshots
          path: ~/repo/dist/cypress/apps
      - slack/status
  deploy-to-prod:
    executor: blockframes-ci
    environment:
      - ENV: production
      - NODE_OPTIONS: '--max_old_space_size=4096'
    steps:
      - run: echo "${FIREBASE_CI_SERVICE_ACCOUNT}" > creds.json
      - checkout_project
      - run: cp env/env.prod.ts env/env.ts # required for the typechecking & file rewrite to work
      - run: npm run build:all
      - slack/notify:
          message: 'ðŸšš Deploying to production...'
      - do-exclusively/do-exclusively:
          # Note: right now do-exclusively excludes cross-jobs (staging & prod).
          token: $CIRCLE_TOKEN
          command: |
            npm install --save-dev firebase-tools &&
            npx firebase use prod &&
            ENV=production npx firebase deploy --except functions &&
            ENV=production npx firebase deploy --only functions --force
      - slack/status
  deploy-to-staging:
    executor: blockframes-ci
    environment:
      - ENV: staging
      - NODE_OPTIONS: '--max_old_space_size=4096'
    steps:
      - checkout_project
      - run: cp env/env.staging.ts env/env.ts # required for the typechecking & file rewrite to work
      - run: npm run build:all
      - slack/notify:
          message: 'ðŸ›µ Deploying to staging.. (https://staging.blockframes.io/)'
      - run:
          command: |
            npm install --save-dev firebase-tools &&
            npx firebase use staging &&
            ENV=staging npx firebase deploy --except functions &&
            ENV=staging npx firebase deploy --only functions --force
      - run: node dist/apps/backend-ops/main.js upgrade
      - slack/status
workflows:
  version: 2.1
  build-and-test:
    jobs:
      # build only the PR
      - build-and-test-prs:
          filters:
            branches:
              ignore:
                - ci
                - master
                - production
                - staging
      # build EVERYTHING and trigger the rest of the deploy
      - build-and-test-all:
          filters:
            branches:
              only:
                - ci
                - master
                - production
                - staging
      - test-e2e:
          <<: *ci_only
          requires:
            - build-and-test-all
      - deploy-to-prod:
          <<: *production_only
          requires:
            - build-and-test-all
      - deploy-to-staging:
          <<: *staging_only
          requires:
            - build-and-test-all
  nightly-e2e:
    triggers:
      - schedule:
          cron: '0 0 * * *'
          filters:
            branches:
              only:
                - master
    jobs:
      - build-and-test-all
      - test-e2e:
          requires:
            - build-and-test-all
